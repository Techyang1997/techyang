<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList源码分析</title>
    <url>/2021/04/18/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="ArrayList集合源码分析"><a href="#ArrayList集合源码分析" class="headerlink" title="ArrayList集合源码分析"></a>ArrayList集合源码分析</h1><p><strong>ArrayList的扩容机制</strong></p>
<ul>
<li><p>ArrayList中维护了一个Object类型的数组elementData</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// 非私有，以简化嵌套类访问非私有，以简化嵌套类访问</span></span><br></pre></td></tr></table></figure></li>
<li><p>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第一次添加，则扩容elementData为10，如果需要再次扩容，则扩容elementData为1.5倍。</p>
</li>
<li><p>如果是使用的指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1.5倍。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayList集合源码解读</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();	<span class="comment">//见第1点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            arrayList.add(i);	<span class="comment">//见第2点</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.无参构造器，初始elementData的容量为0</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.add方法,add()方法内部</strong><br>   2.1 E e：这个方法的入参类型是一个泛型，可以是String,Student等类型<br>   2.2 ensureCapacityInternal(size + 1) ：首先进入这个方法判断是否需要扩容<br>   2.3 elementData[size++] = e ：将要添加的元素的值赋给数组的第size个元素，然后size自增1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.ensureCapacityInternal(size + 1)方法内部</strong><br>   3.1 int minCapacity：字面意思 最小容量<br>   3.2 calculateCapacity(elementData, minCapacity) ： 分析见第4点<br>   3.3 ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)) ：分析见第5点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.calculateCapacity(elementData, minCapacity)方法内部</strong><br>      4.1 判断elementData的容量是否为0，如果为0，返回一个默认值：10；如果不为0，则直接返回传过来的最小容量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.ensureExplicitCapacity(calculateCapacity(elementData, minCapacity))方法内部</strong><br>      5.1 int minCapacity：将上一个方法确定的最终的容量传进来<br>      5.2 modCount++ ：modCount自增1，modCount表示修改次数，每增加一个元素，modCount都会增加1<br>           <em><strong>拓展</strong></em>：在这些线程不安全的集合中，在某些方法中，初始化迭代器时会给这个modCount赋值，<br>           如果在遍历的过程中，一旦发现这个对象的modCount和迭代器存储的modCount不一样，就会报错。<br>      5.3 minCapacity与elementData的长度进行比较，如果大于0，就会进行扩容（grow(minCapacity)方法见第6点），否则直接返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6.grow(int minCapacity)方法，真正扩容的地方</strong><br>  6.1 定义oldCapacity、newCapacity两个容量分别表示原来的容量和最新的容量。<br>        oldCapacity的大小为elementData的大小<br>        newCapacity的大小为原来的1.5倍<br>  6.2 判断最新的容量和需要的最小容量进行比较，如果最新的容量比需要的最小容量还要小，那么将最新的容量更新为所需要的最小        的容量；否则不变<br>  6.3 判断最新的容量是否大于规定的最大容量（一般不会），hugeCapacity(minCapacity)方法暂不分析<br>  6.4 Arrays.copyOf(elementData, newCapacity)：将elementData进行扩容，扩容至最新的大小</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2020/12/20/Hello-Hexo/</url>
    <content><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>hexo官网： <a href="http://hexo.io/">http://hexo.io</a></p>
<h1 id="Hexo优势"><a href="#Hexo优势" class="headerlink" title="Hexo优势"></a>Hexo优势</h1><p>由于github pages存放的都是静态文件，hexo所做的就是将md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<p>Hexo具有以下特点：</p>
<ul>
<li>超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染</li>
<li>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件</li>
<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>
<li>丰富的插件：Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScrip</li>
</ul>
<h1 id="Hexo搭建流程"><a href="#Hexo搭建流程" class="headerlink" title="Hexo搭建流程"></a>Hexo搭建流程</h1><h2 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h2><ul>
<li><a href="https://gitforwindows.org/">git</a></li>
<li><a href="https://nodejs.org/en/">Node.js</a>（下载安装LTS版本）</li>
</ul>
<p>安装的时候一直”next”即可，这里就不详细赘述。</p>
<h2 id="2、使用hexo来正式搭建博客"><a href="#2、使用hexo来正式搭建博客" class="headerlink" title="2、使用hexo来正式搭建博客"></a>2、使用hexo来正式搭建博客</h2><h3 id="2-1、安装hexo"><a href="#2-1、安装hexo" class="headerlink" title="2.1、安装hexo"></a>2.1、安装hexo</h3><ul>
<li><p>win+r，打开cmd控制台</p>
</li>
<li><p>添加国内镜像(这里我们使用阿里的国内镜像进行加速)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>
<li><p>通过cnpm来安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p>新建一个文件夹(位置自己选，手动新建即可)</p>
</li>
</ul>
<h3 id="2-2、初始化博客"><a href="#2-2、初始化博客" class="headerlink" title="2.2、初始化博客"></a>2.2、初始化博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>初始化完成之后会显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<h3 id="2-3、启动博客"><a href="#2-3、启动博客" class="headerlink" title="2.3、启动博客"></a>2.3、启动博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s <span class="comment">#等价于 hexo server ，hexo 会监视文件变动并自动更新，除修改站点配置文件外，无须重启服务器，直接刷新网页即可生效。</span></span><br></pre></td></tr></table></figure>

<p>至此，博客即在<strong><a href="http://localhost:4000/">http://localhost:4000</a></strong>启动，可以通过浏览器查看。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之BigDecimal详解</title>
    <url>/2020/12/27/BigDecimal%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java之BigDecimal详解"><a href="#Java之BigDecimal详解" class="headerlink" title="Java之BigDecimal详解"></a>Java之BigDecimal详解</h1><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是Double.valueOf(String) 和Float.valueOf(String)会丢失精度。所以开发中，如果我们需要精确计算的结果，则必须使用BigDecimal类来操作。BigDecimal所创建的是对象，故我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。</p>
<h2 id="1-1、常用构造函数"><a href="#1-1、常用构造函数" class="headerlink" title="1.1、常用构造函数"></a>1.1、常用构造函数</h2><ol>
<li><p>BigDecimal(int)</p>
<p>创建一个具有参数所指定整数值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为int类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	输出结果：</span></span><br><span class="line"><span class="comment">	BigDecimal的参数为int类型：1</span></span><br><span class="line"><span class="comment">	 */</span></span><br></pre></td></tr></table></figure></li>
<li><p>BigDecimal(double)</p>
<p>创建一个具有参数所指定双精度值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1.1</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="number">1.11</span>);</span><br><span class="line">    BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="number">1.111</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + b );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + c );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.100000000000000088817841970012523233890533447265625</span></span><br><span class="line"><span class="comment">    ===============================</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.1100000000000000976996261670137755572795867919921875</span></span><br><span class="line"><span class="comment">    ===============================</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.1109999999999999875655021241982467472553253173828125</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></li>
<li><p>BigDecimal(long)</p>
<p>创建一个具有参数所指定长整数值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">111111111111111111L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为long类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为long类型：111111111111111111</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></li>
<li><p>BigDecimal(String)  <strong>常用</strong></p>
<p>创建一个具有参数所指定以字符串表示的数值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.000010111111111111111111111111111&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为String类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为String类型：1.000010111111111111111111111111111</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>BigDecimal(double)  与  BigDecimal(String) </p>
</blockquote>
<p>先看例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1.1</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为String类型：&quot;</span> + b );</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.100000000000000088817841970012523233890533447265625</span></span><br><span class="line"><span class="comment">    ===============================</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为String类型：1.1</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<p>原因：</p>
<p>1）参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入newBigDecimal(0.1)所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。</p>
<p>2）String 构造方法是完全可预知的：写入 newBigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言， 通常建议优先使用String构造方法。</p>
<p>3）当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法。</p>
<h2 id="1-2、BigDecimal常用方法详解"><a href="#1-2、BigDecimal常用方法详解" class="headerlink" title="1.2、BigDecimal常用方法详解"></a>1.2、BigDecimal常用方法详解</h2><ol>
<li><p>加减乘除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;3.1&quot;</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;6.6&quot;</span>);</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    BigDecimal addResult = a.add(b);</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    BigDecimal subResult = a.subtract(b);</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    BigDecimal mulResult = a.multiply(b);</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    BigDecimal divResult = a.divide(b,<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;加法运算结果--------&gt;&quot;</span> + addResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;减法运算结果--------&gt;&quot;</span> + subResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;乘法运算结果--------&gt;&quot;</span> + mulResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法运算结果--------&gt;&quot;</span> + divResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    加法运算结果--------&gt;9.7</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    减法运算结果--------&gt;-3.5</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    乘法运算结果--------&gt;20.46</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    除法运算结果--------&gt;0.5</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>在做除法运算时，可能会出现除不尽的情况，这个时候会报异常！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span><br><span class="line">	at java.math.BigDecimal.divide(BigDecimal.java:1693)</span><br><span class="line">	at org.sang.service.ArticleService.main(ArticleService.java:166)</span><br></pre></td></tr></table></figure>

<p>解决方案：给divide方法设置精确的小数点，如：divide(xxxxx,2)</p>
</li>
<li><p>比较大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;3.1&quot;</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;6.6&quot;</span>);</span><br><span class="line">    BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line">    BigDecimal d = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较大小</span></span><br><span class="line">    <span class="keyword">int</span> result1 = a.compareTo(b);</span><br><span class="line">    <span class="keyword">int</span> result2 = b.compareTo(c);</span><br><span class="line">    <span class="keyword">int</span> result3 = c.compareTo(c);</span><br><span class="line">    System.out.println(<span class="string">&quot;小于----------&gt;&quot;</span> + result1);</span><br><span class="line">    System.out.println(<span class="string">&quot;大于----------&gt;&quot;</span> + result2);</span><br><span class="line">    System.out.println(<span class="string">&quot;等于----------&gt;&quot;</span> + result3);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    小于----------&gt;-1</span></span><br><span class="line"><span class="comment">    大于----------&gt;1</span></span><br><span class="line"><span class="comment">    等于----------&gt;0</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<p>在开发中进行比较是，如果是 小于 那个结果小于0；如果是 等于 那么结果等于0；如果是 大于 那么结果是大于0.</p>
</li>
</ol>
<h2 id="1-3、BigDecimal格式化"><a href="#1-3、BigDecimal格式化" class="headerlink" title="1.3、BigDecimal格式化"></a>1.3、BigDecimal格式化</h2><ol>
<li><p>BigDecimal格式化保留2为小数，不足则补0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatToNumber</span><span class="params">(BigDecimal obj)</span> </span>&#123;</span><br><span class="line">    DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0.00&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class="number">0</span>&amp;&amp;obj.compareTo(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>+df.format(obj).toString();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> df.format(obj).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="1-4、BigDecimal总结"><a href="#1-4、BigDecimal总结" class="headerlink" title="1.4、BigDecimal总结"></a>1.4、BigDecimal总结</h2><ol>
<li><p>总结</p>
<ul>
<li>在需要精确的小数计算时再使用BigDecimal，BigDecimal的性能比double和float差，在处理庞大，复杂的运算时尤为明显。故一般精度的计算没必要使用BigDecimal。</li>
<li>尽量使用参数类型为String的构造函数。</li>
<li>BigDecimal都是不可变的（immutable）的， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。</li>
</ul>
</li>
<li><p>工具类推荐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vivo.ars.util;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于高精确处理常用的数学运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认除法运算精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEF_DIV_SCALE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">add</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">add</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">sub</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sub</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">mul</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mul</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">div</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> v, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(Double.toString(v));</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">round</span><span class="params">(String v, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(v);</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">remainder</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数  BigDecimal</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">remainder</span><span class="params">(BigDecimal v1, BigDecimal v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">int</span> bj = b1.compareTo(b2);</span><br><span class="line">        <span class="keyword">boolean</span> res;</span><br><span class="line">        <span class="keyword">if</span> (bj &gt; <span class="number">0</span>)</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
</search>
