<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>什么是方法</title>
    <url>/2023/05/03/%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>方法(method) 也称为函数(function) : 是java程序中的独立的功能单位.</p>
<p>方法必须隶属于类, 且不可以嵌套定义声明.</p>
<h2 id="方法声明"><a href="#方法声明" class="headerlink" title="方法声明"></a>方法声明</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(数据类型1 形参1, 数据类型2 形参2, 数据类型3 形参3,....) &#123;</span><br><span class="line">    语句块; // 处理和加工数据</span><br><span class="line">    <span class="built_in">return</span> 返回值; // 经过处理的结果数据, 返回给调用者</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>返回值类型 : </p>
<p>方法的成果数据的类型</p>
</li>
<li><p>方法名 : 标识符</p>
</li>
<li><p>形式参数 : </p>
<p>方法的功能性的完成需要的数据, 没有数据万万不行, 但是数据值是多少不影响功能性.</p>
</li>
<li><p>return : </p>
<p>返回结果数据给调用者.</p>
</li>
</ul>
<h2 id="形式组合"><a href="#形式组合" class="headerlink" title="形式组合"></a>形式组合</h2><ul>
<li><p>有参有返回 : 有输入有输出</p>
</li>
<li><p>有参无返回 : 有输入无输出</p>
</li>
<li><p>无参有返回 : 无输入有输出</p>
</li>
<li><p>无参无返回 : 无输入无输出</p>
</li>
</ul>
<p><strong>方法没有返回值时, 且在最后的return可以省略</strong></p>
<h2 id="方法调用流程"><a href="#方法调用流程" class="headerlink" title="方法调用流程"></a>方法调用流程</h2><ol>
<li><p>在调用者方法中 通过实参 给 形参传递数据, 传递的方式就是赋值 形参=实参</p>
</li>
<li><p>在调用者方法中作现场保护, 目的就是方法结束后知道该怎么继续.</p>
</li>
<li><p>现场保护完成后, 调用者方法挂起, 进入暂停状态</p>
</li>
<li><p>被调用方法处于激活运行状态, 把通过形参接收到的数据在方法中进一步处理(执行里面的语句)</p>
</li>
<li><p>把最终成果数据通过 return, 返回, 把成果数据保存在一个临时变量空间中, 被调用方法彻底结束.</p>
</li>
<li><p>把返回值的临时空间交给调用者方法, 在调用者方法中只有一次机会接收这个临时空间中的返回值</p>
</li>
<li><p>接收到返回值以后,作现场恢复, 继续执行后面的代码.</p>
</li>
</ol>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest</span> </span>&#123;</span><br><span class="line">  <span class="comment">//修饰符 返回值类型 方法名(参数列表) &#123;方法体&#125;;</span></span><br><span class="line">  <span class="comment">//求2个整数的和</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;add(int a, int b)...&quot;</span>);</span><br><span class="line">    <span class="keyword">short</span> c = (<span class="keyword">short</span>)(a + b);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main begin&quot;</span>);</span><br><span class="line">    <span class="keyword">short</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">byte</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> c = add(a, b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    test(); <span class="comment">// 纯调用.</span></span><br><span class="line">    System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;MethodTest.test()...&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;test222&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main1</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main begin&quot;</span>);</span><br><span class="line">    <span class="comment">// 调用方法 : 方法名(实参列表);</span></span><br><span class="line">    <span class="keyword">int</span> x = add(<span class="number">20</span>, <span class="number">80</span>); <span class="comment">// 20和80就是实参列表.</span></span><br><span class="line">    <span class="comment">//System.out.println(c);</span></span><br><span class="line">    System.out.println(x);</span><br><span class="line">    System.out.println(add(<span class="number">30</span>, <span class="number">200</span>)); <span class="comment">// 嵌套调用, 先执行里面的. 返回值的一次性使用</span></span><br><span class="line">    <span class="comment">// 如果方法没有返回值, 禁止用变量接收.</span></span><br><span class="line">    test(); <span class="comment">// ()是方法的标志</span></span><br><span class="line">    <span class="comment">//int n = test();</span></span><br><span class="line">    <span class="comment">// 如果方法没有返回值, 禁止打印它的调用</span></span><br><span class="line">    <span class="comment">//System.out.println(test());</span></span><br><span class="line">    test();</span><br><span class="line">    System.out.println(<span class="string">&quot;main end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="方法调用图"><a href="#方法调用图" class="headerlink" title="方法调用图"></a>方法调用图</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTest2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;test(int a)... : &quot;</span> + a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    test(a); <span class="comment">// 连环调用</span></span><br><span class="line">    System.out.println(<span class="string">&quot;add(int, int)...&quot;</span>); <span class="comment">// 3</span></span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main begin&quot;</span>); </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">int</span> c = add(a, b);</span><br><span class="line">    System.out.println(c);</span><br><span class="line">    System.out.println(<span class="string">&quot;main end&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://techyang-blog-pic.oss-cn-beijing.aliyuncs.com/img/image-20230503151609535.png" alt="image-20230503151609535"></p>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul>
<li><strong>方法重载</strong>(overload)：指在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可，与修饰符和返回值类型无关。</li>
<li>参数列表：数据类型个数不同，数据类型不同（按理来说数据类型顺序不同也可以，但是很少见，也不推荐，逻辑上容易有歧义）。</li>
<li>重载方法调用：JVM通过方法的参数列表，调用匹配的方法。<ul>
<li>先找个数、类型最匹配的</li>
<li>再找个数和类型可以兼容的，如果同时多个方法可以兼容将会报错</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">判 断：</span><br><span class="line">与<span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">char</span> b,<span class="keyword">double</span> c)</span></span>&#123;&#125;构成重载的有：</span><br><span class="line">a)  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">char</span> y,<span class="keyword">double</span> z)</span></span>&#123;&#125;   f</span><br><span class="line">b)  <span class="function"><span class="keyword">int</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> c,<span class="keyword">char</span> b)</span></span>&#123;&#125;   t</span><br><span class="line">c)  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">double</span> c,<span class="keyword">char</span> b)</span></span>&#123;&#125;  t</span><br><span class="line">d)  <span class="function"><span class="keyword">boolean</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> c,<span class="keyword">char</span> b)</span></span>&#123;&#125;  t</span><br><span class="line">e)  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> c)</span></span>&#123;&#125;  t</span><br><span class="line">f)  <span class="function"><span class="keyword">double</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">char</span> y,<span class="keyword">double</span> z)</span></span>&#123;&#125;  f</span><br><span class="line">g)  <span class="function"><span class="keyword">void</span> <span class="title">shows</span><span class="params">(<span class="keyword">double</span> c)</span></span>&#123;&#125;  f</span><br></pre></td></tr></table></figure>



<h2 id="方法的递归调用"><a href="#方法的递归调用" class="headerlink" title="方法的递归调用"></a>方法的递归调用</h2><p><strong>递归调用</strong>：方法自己调用自己的现象就称为递归。</p>
<p><strong>递归的分类:</strong></p>
<ul>
<li>递归分为两种，直接递归和间接递归。</li>
<li>直接递归称为方法自身调用自己。</li>
<li>间接递归可以A方法调用B方法，B方法调用C方法，C方法调用A方法。</li>
</ul>
<p><strong>注意事项</strong>：</p>
<ul>
<li>递归一定要有条件限定，保证递归能够停止下来，否则会发生栈内存溢出。</li>
<li>在递归中虽然有限定条件，但是递归深度不能太深，否则效率低下，或者也会发生栈内存溢出。<ul>
<li>能够使用循环代替的，尽量使用循环代替递归</li>
</ul>
</li>
</ul>
<p><strong>什么时候用递归</strong>：把复杂问题分解成一个小问题和相同类型的子问题(子问题就用递归)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 有限的递归, 必须有参数, 因为要通过参数的控制来达到让它趋于结束 (像迭代)</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//return test(n); // 递归调用 : 方法调用自身. 无限递归, 死归</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * test(n - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(test(<span class="number">5</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://techyang-blog-pic.oss-cn-beijing.aliyuncs.com/img/image-20230503153012137.png" alt="image-20230503153012137"></p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE数组</title>
    <url>/2023/05/01/JavaSE%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="1-数组的概念"><a href="#1-数组的概念" class="headerlink" title="1. 数组的概念"></a>1. 数组的概念</h1><p>一组<code>相同类型</code>的数据的组合, 实现对这些数据的统一管理和处理. 数组必用循环!</p>
<blockquote>
<p>数组的特点</p>
</blockquote>
<ul>
<li>数组的长度一旦确定就不能修改</li>
<li>创建数组时会在内存中开辟一整块连续的空间。</li>
<li>存取元素的速度快，因为可以通过[下标]，直接定位到任意一个元素。</li>
<li>任意数据类型都可以创建数组, 包括基本数据类型和引用数据类型.</li>
</ul>
<h2 id="1-1-一维数组"><a href="#1-1-一维数组" class="headerlink" title="1.1 一维数组"></a>1.1 一维数组</h2><h3 id="1-1-1-一维数组动态初始化"><a href="#1-1-1-一维数组动态初始化" class="headerlink" title="1.1.1 一维数组动态初始化"></a>1.1.1 一维数组动态初始化</h3><ul>
<li><p>声明 :    元素数据类型[] 数组名;   // 数组名是一个引用变量, 作用是保存对象的地址</p>
</li>
<li><p>创建 :    数组名 = new 元素数据类型[数组长度];  // 即使不做任何处理, 数组中的所有元素值均为默认值0</p>
</li>
<li><p>使用 : </p>
<ul>
<li>定位元素：首地址 + 偏移量</li>
<li>赋值：数组名[下标] = 值;  // 写入</li>
<li>读值：sout(数组名[下标]); // 读取    数组的下标(索引)范围  [0~length-1]</li>
</ul>
</li>
</ul>
<h3 id="1-1-2-一维数组静态初始化"><a href="#1-1-2-一维数组静态初始化" class="headerlink" title="1.1.2 一维数组静态初始化"></a>1.1.2 一维数组静态初始化</h3><ul>
<li><p>静态方式1, 此时数组的长度也是确定的, 元素值也都是确定的</p>
<p>只适用于声明和创建及初始化在同一行上.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr2 = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">9</span>&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>静态方式2, 此时数组的长度也是确定的, 元素值也都是确定的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">10</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">8</span>&#125;;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">int</span>[] arr2;</span><br><span class="line">arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="1-1-3-常见算法"><a href="#1-1-3-常见算法" class="headerlink" title="1.1.3 常见算法"></a>1.1.3 常见算法</h3><blockquote>
<p>如何生成随机数</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//产生一个[0~1)随机double值</span></span><br><span class="line">Math.random();</span><br><span class="line"><span class="comment">// 产生一个100以内的随机浮点数</span></span><br><span class="line">Math.random() * <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成一个[0,20)的随机整数</span></span><br><span class="line">(<span class="keyword">int</span>)(Math.random() * <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 生成一个[60,100)的随机整数</span></span><br><span class="line">(<span class="keyword">int</span>)(Math.random() * <span class="number">40</span> + <span class="number">60</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>数组赋值和遍历</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// arr用于保存int[]对象的地址, 但此时并没有地址</span></span><br><span class="line">  <span class="comment">// 右面的操作是在堆内存中创建一个全新的int[]数组对象, 这个对象包含5个元素, 并且每个类型都是int型</span></span><br><span class="line">  <span class="comment">// 再把创建好的对象的地址写入arr引用变量中, arr引用变量中保存的就是数组对象的地址.</span></span><br><span class="line">  <span class="keyword">int</span>[] arr; </span><br><span class="line">  arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>求平均值</p>
</blockquote>
<ul>
<li><p>无条件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main6</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 求 和</span></span><br><span class="line">  <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum += arr[i]; <span class="comment">// 要累加的是元素值, 而不是下标索引.</span></span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 求平均值</span></span><br><span class="line">  <span class="keyword">int</span> avg = sum / arr.length;</span><br><span class="line">  System.out.println(<span class="string">&quot;avg = &quot;</span> + avg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>有条件：求能被7整除的数平均值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main8</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//求能被7整除的数平均值</span></span><br><span class="line">  <span class="keyword">int</span> sum7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> count7 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">7</span> == <span class="number">0</span>) &#123; <span class="comment">// 过滤的时候要取到元素值</span></span><br><span class="line">      sum7 += arr[i]; <span class="comment">// 有条件累加元素值</span></span><br><span class="line">      count7++; <span class="comment">// 有条件计数</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;sum7 = &quot;</span> + sum7);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (count7 == <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有能被7整除的数&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> avg7 = sum7 / count7;</span><br><span class="line">    System.out.println(<span class="string">&quot;avg7 = &quot;</span> + avg7);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>求最大值/最小值</p>
</blockquote>
<ul>
<li><p>无条件</p>
<ul>
<li><p>数值法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//找出最大值</span></span><br><span class="line">  <span class="keyword">int</span> max = arr[<span class="number">0</span>]; <span class="comment">// 假定第1个元素最大</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; max) &#123; <span class="comment">// 如果某元素比max还大</span></span><br><span class="line">      max = arr[i]; <span class="comment">// 刷新max的值为更大的值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;max = &quot;</span> + max);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 找出最小值.</span></span><br><span class="line">  <span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; min) &#123;</span><br><span class="line">      min = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;min = &quot;</span> + min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>下标法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main6</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最大值, 找它的下标值</span></span><br><span class="line">  <span class="keyword">int</span> maxIndex = <span class="number">0</span>; <span class="comment">// 假定下标0位置的值最大</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex]) &#123; <span class="comment">// 如果某个i位置下标的值比 最大值下标 位置处的值 还大</span></span><br><span class="line">      maxIndex = i; <span class="comment">// 记录更大的值的下标位置.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;最大值[&quot;</span> + maxIndex + <span class="string">&quot;] : &quot;</span> + arr[maxIndex]); <span class="comment">// 要把maxIndex作为下标来使用才能取到元素值</span></span><br><span class="line">  <span class="comment">// 用下标法找最小值</span></span><br><span class="line">  <span class="keyword">int</span> minIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">      minIndex = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">&quot;最小值[&quot;</span> + minIndex + <span class="string">&quot;] : &quot;</span> + arr[minIndex]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>有条件：能被7整除的数的最大值</p>
<ul>
<li><p>极值法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main5</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">80</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">50</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//能被7整除的数的最大值</span></span><br><span class="line">  <span class="keyword">int</span> max7 = <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">7</span> == <span class="number">0</span>) &#123; <span class="comment">// 这个条件单独列出来, 表明是一个先决条件</span></span><br><span class="line">      <span class="keyword">if</span> (max7 == <span class="number">0x80000000</span>) &#123;</span><br><span class="line">        max7 = arr[i];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; max7) &#123; <span class="comment">// 只有满足条件了的数据再进入到这里比较和刷新</span></span><br><span class="line">          max7 = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (max7 == <span class="number">0x80000000</span>) &#123; <span class="comment">// 如果它没有变化过, 说明 if (arr[i] % 7 == 0) 没有进去过</span></span><br><span class="line">    System.out.println(<span class="string">&quot;没有能被7整除的数&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;max7 = &quot;</span> + max7);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 找出能被13整除的数的最小值.</span></span><br><span class="line">  <span class="keyword">int</span> min13 = <span class="number">0x7FFFFFFF</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">13</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; min13) &#123;</span><br><span class="line">        min13 = arr[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (min13 != <span class="number">0x7FFFFFFF</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;min13 = &quot;</span> + min13);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有能被13整除的数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>下标法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main7</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">  <span class="comment">// 找出能被7整除的数的最大值的下标</span></span><br><span class="line">  <span class="keyword">int</span> maxIndex7 = -<span class="number">1</span>; <span class="comment">// 能被7整除的数的最大值在不存在的位置上.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (maxIndex7 == -<span class="number">1</span>) &#123; <span class="comment">// 第1个满足条件的数据, 不要比, 直接刷新记录下标即可</span></span><br><span class="line">        maxIndex7 = i; <span class="comment">// 刷新为某个i, i一定是0~length-1中的有效下标</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// maxIndex不再是无效下标, 说明已经找到过满足条件的数据了</span></span><br><span class="line">        <span class="comment">// 再比较和刷新即可</span></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex7]) &#123;</span><br><span class="line">          maxIndex7 = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (maxIndex7 == -<span class="number">1</span>) &#123; <span class="comment">// 如果它维持了标记值-1, 说明最外层的if 没有进去.</span></span><br><span class="line">    System.out.println(<span class="string">&quot;没有能被7整除的数&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;arr[&quot;</span> + maxIndex7 + <span class="string">&quot;] = &quot;</span> + arr[maxIndex7]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 找出能被13整除的数的最小值下标.</span></span><br><span class="line">  <span class="keyword">int</span> minIndex13 = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">13</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (minIndex13 == -<span class="number">1</span>) &#123;</span><br><span class="line">        minIndex13 = i;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; arr[minIndex13]) &#123;</span><br><span class="line">          minIndex13 = i;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (minIndex13 != -<span class="number">1</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;arr[&quot;</span> + minIndex13 + <span class="string">&quot;] : &quot;</span> + arr[minIndex13]);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有满足条件的数据&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>标记值的处理永远是不合理数据!</strong></p>
</li>
</ul>
<blockquote>
<p>数组反转</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main8</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>)(Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">  <span class="comment">//0  1 2  3 4 5 6 7</span></span><br><span class="line">  <span class="comment">//19 1 16 3 7 9 7 17</span></span><br><span class="line">  <span class="comment">// 反转</span></span><br><span class="line">  <span class="comment">// 处理length/2次, 交换i和length-1-i位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 交换i和length-1-i位置</span></span><br><span class="line">    <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">    arr[i] = arr[arr.length - <span class="number">1</span> - i];</span><br><span class="line">    arr[arr.length - <span class="number">1</span> - i] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>冒泡排序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123; <span class="comment">// 外循环纯控制趟数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - j; i++) &#123; <span class="comment">// 内循环控制每趟的比较交换, 次数会越来越少.</span></span><br><span class="line">      <span class="comment">// 只要是左大右小就交换</span></span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">        arr[i + <span class="number">1</span>] = tmp;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>选择排序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">8</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    arr[i] = (<span class="keyword">int</span>) (Math.random() * <span class="number">20</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">  <span class="comment">// 外循环控制位置</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> minIndex = i;</span><br><span class="line">    <span class="comment">// 内循环控制剩余元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[minIndex];</span><br><span class="line">    arr[minIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>快速排序</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 快速排序, 分区和递归</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> begin, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (begin &gt;= end - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取第1个元素的值为key值</span></span><br><span class="line">  <span class="keyword">int</span> key = arr[begin];</span><br><span class="line">  <span class="comment">// 算法灵魂, 作用是最终定位key值位置, 控制比key小的值的插入</span></span><br><span class="line">  <span class="keyword">int</span> keyIndex = begin;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = begin + <span class="number">1</span>; i &lt; end; i++) &#123;</span><br><span class="line">    <span class="comment">// 只找比key小的值</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; key) &#123;</span><br><span class="line">      <span class="comment">// 向右移动一个位置, 用于保存比key小的值</span></span><br><span class="line">      keyIndex++;</span><br><span class="line">      <span class="keyword">if</span> (keyIndex != i) &#123;</span><br><span class="line">        <span class="comment">// 交换keyIndex和i位置</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        <span class="comment">// 这个位置通常是一个比key大的值</span></span><br><span class="line">        arr[i] = arr[keyIndex];</span><br><span class="line">        arr[keyIndex] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 此时比key小的值就会依次放在key的右面.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr[begin] = arr[keyIndex];</span><br><span class="line">  <span class="comment">//让key值归位到keyIndex位置</span></span><br><span class="line">  arr[keyIndex] = key;</span><br><span class="line">  <span class="comment">// 左子列和右子列递归</span></span><br><span class="line">  quickSort(arr, begin, keyIndex);</span><br><span class="line">  quickSort(arr, keyIndex + <span class="number">1</span>, end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象基础（上）</title>
    <url>/2023/05/03/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="1-面向对象编程"><a href="#1-面向对象编程" class="headerlink" title="1. 面向对象编程"></a>1. 面向对象编程</h1><p>面向对象思想研究的三条主线：</p>
<ol>
<li><p>类和类成员的研究</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 属性：描述事物的特征</span><br><span class="line">2. 方法：描述事物的行为</span><br><span class="line">3. 构造器：又称构造方法</span><br><span class="line">4. 语句块：待补充</span><br><span class="line">5. 内部类：待补充</span><br></pre></td></tr></table></figure></li>
<li><p>三大特征</p>
<p>封装:</p>
<ol>
<li>成员私有化, 使用private修饰成员, 再提供get/set方法间接访问成员, 最终的目的是保护数据.</li>
<li>功能性封装</li>
</ol>
<p>继承：待补充</p>
<p>多态：待补充</p>
</li>
<li><p>其它关键字</p>
<p>this,super,package,import,static,final,abstract,extends,interface,implements,native……</p>
</li>
</ol>
<h2 id="1-1-类和对象"><a href="#1-1-类和对象" class="headerlink" title="1.1 类和对象"></a>1.1 类和对象</h2><p>类：某种事物的描述</p>
<p>对象：类的实体</p>
<p><strong>类是模板，对象是实体。</strong></p>
<blockquote>
<p>成员变量和局部变量</p>
</blockquote>
<p>成员变量：</p>
<ul>
<li>成员变量定义在类中，在整个类中都可以被访问</li>
<li>成员变量分为类成员变量和实例成员变量，实例变量存在于对象所在的堆内存中</li>
<li>成员变量都有默认初始化值，均为零</li>
<li>成员变量的权限修饰符可以根据需要选择任意一个 – public：修饰成员的特点是公共的；private：修饰的成员的特点是私有的，只能在本类中使用</li>
</ul>
<p>局部变量：</p>
<ul>
<li>局部变量只定义在局部范围内，如：方法内，代码块内等</li>
<li>局部变量存在于栈内存中</li>
<li>作用的范围结束，变量空间会自动释放</li>
<li>局部变量没有默认初始化值，每次必须显式初始化</li>
<li>局部变量声明时不指定权限修饰符</li>
</ul>
<blockquote>
<p>成员意味着什么？</p>
</blockquote>
<p>成员意味着可以相互访问。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE基础语法</title>
    <url>/2023/04/23/JavaSE%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-第一个程序"><a href="#1-第一个程序" class="headerlink" title="1. 第一个程序"></a>1. 第一个程序</h1><blockquote>
<p>输出Hello World</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">主类：包含了主方法的类。</span></span><br><span class="line"><span class="comment">非主类：没有主方法的类。</span></span><br><span class="line"><span class="comment">公共类：有public修饰的类称为公共类，公共类的类名必须要和源文件名一致。</span></span><br><span class="line"><span class="comment">非公共类：没有public修饰的类,非公共类不可以跨包使用。</span></span><br><span class="line"><span class="comment">**********************************************************</span></span><br><span class="line"><span class="comment">public : 公共的.用于修饰符后面的东西</span></span><br><span class="line"><span class="comment">class : 类. 是java程序的最基本单位，一个java程序必须至少是一个类</span></span><br><span class="line"><span class="comment">Hello : 类名</span></span><br><span class="line"><span class="comment">类名后面的一对&#123;&#125;及其中的内容称为类体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法（method）: 是java程序中的一个独立的功能的单位</span></span><br><span class="line"><span class="comment">    主方法：也称为入口方法，是程序的入口，写法固定</span></span><br><span class="line"><span class="comment">    public static 都是修饰符</span></span><br><span class="line"><span class="comment">    void 返回值类型</span></span><br><span class="line"><span class="comment">    main 方法名</span></span><br><span class="line"><span class="comment">    (String[] args) 参数</span></span><br><span class="line"><span class="comment">    方法名后面的一对&#123;&#125;及其中的内容成为方法体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语句（statement）: 是java 程序中的最小执行单位，语句必须以;结尾</span></span><br><span class="line"><span class="comment">        语句必须是隶属于方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非主类 不能执行 非公共类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;输出test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主类 有入口文件 非公共类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello3</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello3&quot;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语句隶属于方法；方法隶属于类。</p>
<h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2. 基础语法"></a>2. 基础语法</h1><h2 id="2-1-标识符的命名"><a href="#2-1-标识符的命名" class="headerlink" title="2.1 标识符的命名"></a>2.1 标识符的命名</h2><blockquote>
<p>标识符的命名规则（必须遵守的硬性规则）</p>
</blockquote>
<ul>
<li>有52个英文字母和10个数字、_和&amp;组成</li>
<li>数字不能开头</li>
<li>不能是关键字或者是保留字，但是可以包含</li>
<li>严格区分大小写</li>
<li>不能包含空格，长度为65535</li>
</ul>
<blockquote>
<p>标识符的命名规范</p>
</blockquote>
<ul>
<li><p>包名：全部小写，多个单词以.分割。例如：my.package</p>
</li>
<li><p>类、接口名首字母大写，后面的单词首字母大写</p>
</li>
<li><p>变量名，方法名，首字母小写，后面的单词首字母大写</p>
</li>
<li><p>常量名，全部大写 多个单词以 _ 分割</p>
</li>
</ul>
<h2 id="2-2-数据类型"><a href="#2-2-数据类型" class="headerlink" title="2.2 数据类型"></a>2.2 数据类型</h2><blockquote>
<p>基本数据类型</p>
</blockquote>
<p>整数</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">1</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2</td>
<td align="center">-32768~32767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4</td>
<td align="center">-20多亿~20多亿</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">8</td>
<td align="center">-900多亿亿~900多亿亿</td>
</tr>
</tbody></table>
<p>浮点型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">4</td>
<td align="center">-10^38~10^38</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
<td align="center">-10^308~10^308</td>
</tr>
</tbody></table>
<p>字符型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">2</td>
<td align="center">0~65535</td>
</tr>
</tbody></table>
<p>布尔型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean</td>
<td align="center">1</td>
<td align="center">true、false</td>
</tr>
</tbody></table>
<h2 id="2-3-变量声明以及初始化"><a href="#2-3-变量声明以及初始化" class="headerlink" title="2.3 变量声明以及初始化"></a>2.3 变量声明以及初始化</h2><p>变量：内存中的一块<code>被命名的</code>且有<code>特定数据类型</code>约束的<code>空间</code>, 此空间中可以保存一个数据类型要求的数据, 此空间中的<code>数据可以变化</code>.</p>
<p>常量：内存中的一块<code>空间</code>，可以保存一个数据，<code>数据不可改变</code>,包括字面量和用final修饰的量</p>
<blockquote>
<p>变量的分类</p>
</blockquote>
<p>按数据类型分类：<br>        基本数据类型：存放数据本身；<br>        引用数据类型：存放对象地址（内存中某个字节的编号），占用8个字节，编号为0的字节是null<br>按声明语句位置来分：<br>        局部变量：声明在方法中，范围小，寿命短。<br>        成员变量：声明在类中方法外的变量，范围大，寿命长。</p>
<blockquote>
<p>数据类型的作用</p>
</blockquote>
<ul>
<li>决定空间大小</li>
<li>决定了空间中可以保存什么数据</li>
<li>决定了空间中的数据可以做什么</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 变量声明 : 数据类型 变量名;</span></span><br><span class="line">        <span class="keyword">int</span> n1; <span class="comment">// 声明,在内存中开辟一块空间,4字节空间的大小,并且要用n1符号和这块空间映射起来.</span></span><br><span class="line">        n1 = <span class="number">30</span>; <span class="comment">// n1被赋值为30.从右向左,把右面的30的值写入左面的n1符号映射的空间.</span></span><br><span class="line">        System.out.println(n1); <span class="comment">// 根据n1符号,定位在内存空间中,并且把空间中的数据值30复制出来,再打印这个复制品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量的注意事项</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 注意点1：必须要有数据类型和变量名</span></span><br><span class="line">        <span class="comment">//int = 50;</span></span><br><span class="line">        <span class="comment">//b = 30;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点2：必须要先声明后在使用</span></span><br><span class="line">        <span class="comment">//System.out.println(n);</span></span><br><span class="line">        <span class="comment">//int n = 20;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点3：变量中的数据不可以超出范围，变量有其数据范围</span></span><br><span class="line">        <span class="comment">//short n = 20_0000_0000;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点4：变量有其作用范围，由其声明语句所隶属的&#123;&#125;决定</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        n = <span class="number">10</span>;</span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(n); <span class="comment">// 没有问题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点5：同一个作用范围内，变量不允许重复声明</span></span><br><span class="line">        <span class="comment">// short n;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(n);  // 在现在的作用范围内没有 n 变量;编译不通过</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">double</span> n = <span class="number">3.87</span>;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点6：变量必须要经过初始化之后才能使用</span></span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        a = <span class="number">10</span>; <span class="comment">// 初始化赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 普通赋值</span></span><br><span class="line">        a = <span class="number">30</span>; <span class="comment">// 普通赋值</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>必须要有数据类型和变量名</li>
<li>必须要先声明后在使用</li>
<li>变量中的数据不可以超出范围，变量有其数据范围</li>
<li>变量有其作用范围，由其声明语句所隶属的{}决定</li>
<li>同一个作用范围内，变量不允许重复声明</li>
<li>变量必须要经过初始化之后才能使用</li>
</ul>
<h2 id="2-4-变量之间的赋值以及量值的类型"><a href="#2-4-变量之间的赋值以及量值的类型" class="headerlink" title="2.4 变量之间的赋值以及量值的类型"></a>2.4 变量之间的赋值以及量值的类型</h2><p>整数字面量默认使用int类型4字节空间来保存，此空间不允许被改写</p>
<p>浮点数字面量默认使用double型8字节空间保存，此空间不允许被改写</p>
<p>long型：后缀的L的作用就是提醒编译器，不要再使用默认的int类型，而是使用long型来保存这个字面量</p>
<p>float型：后缀F的作用就是提醒编译器，不要在使用默认的double类型，而是使用float类型来保存这个字面量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">10</span>; <span class="comment">// 10这个数据在内存用int型</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">long</span> l2 = <span class="number">40_0000_0000L</span>;<span class="comment">// 后缀的L的作用就是提醒编译器，不要再使用默认的int类型，而是使用long型来保存这个字面量</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span> b2 = b1;</span><br><span class="line">        <span class="keyword">short</span> s2 = b1;</span><br><span class="line">        <span class="comment">//byte b3 = s1;</span></span><br><span class="line">        <span class="comment">// 强制类型转换 变量 = (目标值)值</span></span><br><span class="line">        <span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>)s1; <span class="comment">// 强制类型转换有风险</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// *************************</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 100 = 100</span></span><br><span class="line">        <span class="comment">// 赋值符号的左面必须是变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//s1 = i1;</span></span><br><span class="line">        l1 = i1;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i3 = <span class="number">20</span>;</span><br><span class="line">        s1 = i3;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// int i2 = l1;</span></span><br><span class="line">        <span class="keyword">int</span> i2 = (<span class="keyword">short</span>)l1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">.965</span>;</span><br><span class="line">        <span class="comment">// float f1 = d1;</span></span><br><span class="line">        <span class="keyword">float</span> f1 = (<span class="keyword">float</span>)d1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f2 = (<span class="keyword">float</span>)<span class="number">2.5</span>;</span><br><span class="line">        <span class="keyword">float</span> f3 = <span class="number">3.6F</span>; <span class="comment">// 后缀F的作用就是提醒编译器，不要在使用默认的double类型，而是使用float类型来保存这个字面量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-运算时数据类型的变化"><a href="#2-5-运算时数据类型的变化" class="headerlink" title="2.5 运算时数据类型的变化"></a>2.5 运算时数据类型的变化</h2><ul>
<li><p>任意非long整数变量运算，结果一定是int类</p>
</li>
<li><p>更多的类型混合运算时，会先找范围最大的那个类型，所有参加的数据都升级为最大的范围类型，结果肯定是范围最大的范围类型</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">22</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// short s2 = b1 + l1;</span></span><br><span class="line">        <span class="keyword">short</span> s2 = (<span class="keyword">short</span>)(b1 + l1);</span><br><span class="line">        i1 = b1 + s1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">3.5F</span>;</span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">5.3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右面的结果类型是double型</span></span><br><span class="line">        l1 = (<span class="keyword">long</span>)(i1 + f1 + d1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6-char-字符型"><a href="#2-6-char-字符型" class="headerlink" title="2.6 char 字符型"></a>2.6 char 字符型</h2><ul>
<li>char 数据类型在内存中占用 2 个字符；</li>
<li>2个字节的空间中保存字符对应的Unicode编码，取值范围是0~65535，码值为0的字符称为NULL字符</li>
<li>char 就是整数，正整数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 字符字面量使用&#x27;&#x27;包围, 不能空, 必须保存一个字符</span></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;b&#x27;</span>; <span class="comment">// 根据右面的字符字面量&#x27;b&#x27;查表, 查到对应码值98, 把98存入c2字符型空间中</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c5 = <span class="string">&#x27;我&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c6 = <span class="string">&#x27;你&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 特殊字符，需要转义</span></span><br><span class="line">        <span class="comment">// \n : 换行</span></span><br><span class="line">        <span class="comment">// \r : 回车</span></span><br><span class="line">        <span class="comment">// \t : Tab键</span></span><br><span class="line">        <span class="comment">// \\ : \</span></span><br><span class="line">        <span class="comment">// \&quot; : &quot;</span></span><br><span class="line">        <span class="comment">// \&#x27; : &#x27;</span></span><br><span class="line">        <span class="comment">// \b : 删除键Backspace</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 换行</span></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;\r&#x27;</span>; <span class="comment">// 回车</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;\t&#x27;</span>; <span class="comment">// 制表符</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;abcdef\b\b\b1234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abcdef\r1234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abcdef\n1234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;hello\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-7-boolean-布尔型"><a href="#2-7-boolean-布尔型" class="headerlink" title="2.7 boolean 布尔型"></a>2.7 boolean 布尔型</h2><ul>
<li><p>boolean 在内存中占用1个字节，没有范围，只允许2个值，true和false</p>
</li>
<li><p>boolean 数据类型和其他所有数据类型都不兼容</p>
</li>
<li><p>Boolean主要是用于控制分支和循环 </p>
</li>
</ul>
<h2 id="2-8-String-字符串"><a href="#2-8-String-字符串" class="headerlink" title="2.8 String 字符串"></a>2.8 String 字符串</h2><ul>
<li>String是引用型, 可以指向 一个字符串对象</li>
<li>字符串是内容不可改变的Unicode字符序列. 字符串可以使用 ‘+’ 拼接任意数据,会产生一个新的字符串对象, 内容就是拼接后的结果.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1;</span><br><span class="line">        s1 = <span class="string">&quot;abc&quot;</span>; <span class="comment">// 把右面的&quot;abc&quot;字符串对象地址写给s1引用变量</span></span><br><span class="line">        </span><br><span class="line">        s1 = s1 + <span class="number">100</span>; <span class="comment">// &quot;abc100&quot;</span></span><br><span class="line">        s1 = s1 + <span class="keyword">false</span>; <span class="comment">// &quot;abc100false&quot;</span></span><br><span class="line">        s1 = s1 + <span class="number">3.22</span>; <span class="comment">// &quot;abc100false3.22&quot;</span></span><br><span class="line">        s1 = s1 + <span class="string">&#x27;好&#x27;</span>; <span class="comment">// &quot;abc100false3.22好&quot;</span></span><br><span class="line">        s1 = s1 + <span class="string">&quot;不好&quot;</span>; <span class="comment">// &quot;abc100false3.22好不好&quot;</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        </span><br><span class="line">        String s2 = <span class="string">&quot;&quot;</span>; <span class="comment">// 空串, 空签子</span></span><br><span class="line">        String s3 = <span class="keyword">null</span>; <span class="comment">// 空 , 连签子也没有</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//s3 = s3 + 500;</span></span><br><span class="line">        <span class="comment">//System.out.println(s3);</span></span><br><span class="line">        s2 = s2 + <span class="number">600</span>;</span><br><span class="line">        System.out.println(s2); <span class="comment">// &quot;600&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// int =&gt; String </span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">9832</span>;</span><br><span class="line">        <span class="comment">//String s4 = n1; //</span></span><br><span class="line">        String s4 = <span class="string">&quot;&quot;</span> + n1; <span class="comment">// &quot;9832&quot;</span></span><br><span class="line">        System.out.println(s4);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">3.9923</span>;</span><br><span class="line">        String s5 = <span class="string">&quot;&quot;</span> + d1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String str1 = 4;        							//判断对错：</span></span><br><span class="line">        String str2 = <span class="number">3.5f</span> + <span class="string">&quot;&quot;</span>;             		<span class="comment">//判断str2对错：t</span></span><br><span class="line">        System.out.println(str2);        				<span class="comment">//输出：3.5?</span></span><br><span class="line">        System.out.println(<span class="number">3</span> + <span class="number">4</span> + <span class="string">&quot;Hello!&quot;</span>); 	<span class="comment">//输出：7Hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); 	<span class="comment">//输出：Hello34</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>));     <span class="comment">//输出：Hello7</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> + <span class="string">&quot;Hello!&quot;</span>);    	<span class="comment">// 输出：98Hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>+ <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);       <span class="comment">//输出：Helloa1</span></span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-9-进制"><a href="#2-9-进制" class="headerlink" title="2.9 进制"></a>2.9 进制</h2><table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">二进制</th>
<th align="center">十六进制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0001</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">0010</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">0011</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">0100</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">0101</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">0110</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">0111</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">1000</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">1001</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">1010</td>
<td align="center">A</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">1011</td>
<td align="center">B</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">1100</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">1101</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">1110</td>
<td align="center">E</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">1111</td>
<td align="center">F</td>
</tr>
</tbody></table>
<p><strong>一个16进制数正好可以映射为4个bit的2进制数，所以2个16进制对应8个bit，正好1个字节</strong></p>
<blockquote>
<p>正数和负数如何表示</p>
</blockquote>
<p>用最高位表示符号（最左边）；</p>
<p>​        如果符号位为0，说明这个数就是正数；</p>
<p>​        如果符号位为1，说明这个数就是负数</p>
<blockquote>
<p>计算机中所有的数据都是以二进制的补码形式保存和处理的</p>
</blockquote>
<p>​        正数的补码就是它自己</p>
<p>​        eg:<br>​        0011 1011 =&gt; 0x3B =&gt; 16*3 + 16 =&gt; 59</p>
<p>​        0011 1011 是 + 59 在计算机中的真实存储</p>
<p>​        负数的补码：由它的相反数全部取反再加1得到</p>
<p>​        1101 0011 =&gt; 这是负数的补码</p>
<p>​        -1 =&gt; 1101 0010</p>
<p>​        取反 =&gt; 0010 1101 =&gt; 0x2D =&gt; 16*2 + 15 =&gt; 45</p>
<p>​        1101 0011 是-45在计算机中的真实存储</p>
<p>​        <strong>byte型最小值</strong></p>
<p>​        1000 0000 =&gt;</p>
<p>​        -1 =&gt; 0111 1111 </p>
<p>​        取反 =&gt; 1000 0000 =&gt; 0x80 =&gt; 16*8 =&gt; 128</p>
<p>​        所以 1000 0000 是 -128</p>
<p>​        <strong>short型的最大值</strong></p>
<p>​        0111 1111 1111 1111 =&gt; 0x7FFF</p>
<p>​        <strong>short 型的最小值</strong></p>
<p>​        1000 0000 0000 0000 =&gt; 0x8000</p>
<p>​        int<strong>型最大值</strong></p>
<p>​       0111 1111 1111 1111 1111 1111 1111 1111 =&gt; 0x7FFFFFFF</p>
<p>​        <strong>int型最小值</strong></p>
<p>​        1000 0000 0000 0000 0000 0000 0000 0000 =&gt; 0x8000_0000</p>
<p>​        <strong>long型最大值</strong></p>
<p>​        0x7FFFFFFF_FFFFFFFF</p>
<p>​        <strong>long型最小值</strong></p>
<p>​        0x80000000_00000000</p>
<p>​        <strong>char型最大值</strong></p>
<p>​        1111 1111 1111 1111 =&gt; 0xFFFF</p>
<p>​        <strong>char型最小值</strong></p>
<p>​        0000 0000 0000 0000 =&gt; 0x0000</p>
<h2 id="2-10-运算符和标点符号"><a href="#2-10-运算符和标点符号" class="headerlink" title="2.10 运算符和标点符号"></a>2.10 运算符和标点符号</h2><h3 id="2-10-1-位运算符"><a href="#2-10-1-位运算符" class="headerlink" title="2.10.1 位运算符"></a>2.10.1 位运算符</h3><table>
<thead>
<tr>
<th align="center">符号类型</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移，右面补0</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">有符号右移，左面补符号位</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">无符号右移，左面补0</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">按位与，只要有0就是0，除非全是1，让数变小</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">按位或，只要有1就是1，除非全是0，让数变大</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或，只要不一样就是1，否则是0，用于加密</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">按位取反，全部反，正数变负数，负数变正数</td>
</tr>
</tbody></table>
<h3 id="2-10-2-算术运算符"><a href="#2-10-2-算术运算符" class="headerlink" title="2.10.2 算术运算符"></a>2.10.2 算术运算符</h3><table>
<thead>
<tr>
<th align="center">符号类型</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">取自身的一个数</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">取一个自身的相反数</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">整数相除，会导致数据的精度的丢失</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取2个数相除后的余数</td>
</tr>
</tbody></table>
<p><strong>% 的应用</strong></p>
<ul>
<li><p>M%N结果总是小于Nd的值，可以让一个未知数落入一个确定的N的范围内</p>
</li>
<li><p>M%N结果如果为0，说明M可以被N整除</p>
<ul>
<li>M%2，如果结果为0，说明M是个整数；如果结果不为0，说明M是个奇数。</li>
</ul>
</li>
<li><p>5%-2 ,右面的负号忽略 =&gt; 1</p>
</li>
<li><p>-5 % 2,左面的负号要保留 =&gt; -1</p>
<p><strong>注意</strong> ： 虽然浮点数也支持%，但是从来不用</p>
</li>
</ul>
<p><strong>++ 和 – 的说明</strong></p>
<p>int a  = 10;</p>
<p>a++; // 后加加   a:11</p>
<p>int b = 20;</p>
<p>++b; // 前加加 b : 21</p>
<p>++a // 前加加, 先加后用,  先把a中的值加上1以后, 再用加过后的值作为表达式的值</p>
<p>a++ // 后加加, 先用后加. </p>
<p>赋值符号的优先级最低的, 右面的处理没有完成,绝不能赋值, 必须要把右面的所有事情都办妥了, 再把值赋值到左面.</p>
<p>a = a++;</p>
<p>用的是临时空间的10</p>
<p><img src="https://techyang-blog-pic.oss-cn-beijing.aliyuncs.com/img/image-20230424122432731.png" alt="image-20230424122432731"></p>
<p><strong>练习</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">a = b++;    <span class="comment">// a=10  ,b=11  ,c=10</span></span><br><span class="line">c = --a;    <span class="comment">// a=9  ,b=11  ,c=9</span></span><br><span class="line">b = ++a;    <span class="comment">// a=10  ,b=10  ,c=9</span></span><br><span class="line">a = c--;    <span class="comment">// a=9  ,b=10  ,c=8</span></span><br><span class="line"></span><br><span class="line">System.out.println(a); <span class="comment">// 9</span></span><br><span class="line">System.out.println(b); <span class="comment">// 10</span></span><br><span class="line">System.out.println(c); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = (a++)+(++a)+(a*<span class="number">10</span>);</span><br><span class="line"><span class="comment">//        4     6      60</span></span><br><span class="line"><span class="comment">//       a=5   a=6    a=6</span></span><br><span class="line"></span><br><span class="line">System.out.println(a);<span class="comment">//6</span></span><br><span class="line">System.out.println(b);<span class="comment">//70</span></span><br></pre></td></tr></table></figure>

<h3 id="2-10-3-比较运算符"><a href="#2-10-3-比较运算符" class="headerlink" title="2.10.3 比较运算符"></a>2.10.3 比较运算符</h3><p>结果总是会产生一个boolean值, 要么true, 要么false.</p>
<ol>
<li><p>比较大小 :  &gt;, &lt;, &gt;=, &lt;=</p>
<p>以上的比较只能适用于基本数据类型中的数值型之间. </p>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a  =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">3.2</span>;</span><br><span class="line">a &lt; b;<span class="comment">// false</span></span><br><span class="line"><span class="comment">// *****************</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 5 &lt;= n &lt; 20 ======&gt; 错误, 左面会产生一个boolean, 不能和右面的20比较!!!!</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> &lt;= n == <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>比较是否相等 : ==,  != </p>
<p>适用于任意数据类型之间.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1;</span><br><span class="line">Dog d1;</span><br><span class="line">s1 == d1; <span class="comment">// 编译出错.</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-10-4-逻辑运算符"><a href="#2-10-4-逻辑运算符" class="headerlink" title="2.10.4 逻辑运算符"></a>2.10.4 逻辑运算符</h3><p>可以产生Boolean；适用于2个boolean之间</p>
<ol>
<li><p>&amp;, &amp;&amp; 逻辑与, 就是并且的意思, 左面的boolean是true再并且右面的boolean也是true, 结果才是true</p>
<p>只要有false, 结果一定是false. 除非2个全是true结果才是true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1 = <span class="keyword">true</span>;</span><br><span class="line">b2 = <span class="keyword">false</span>;</span><br><span class="line">b1 &amp;&amp; b2;<span class="comment">// ==&gt; false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>短路与 : </p>
<p>a &amp;&amp; b =&gt; 如果a是true, 需要继续判断b, 如果b是true, 结果就是true, 如果b是false结果就是false</p>
<p>a &amp;&amp; b =&gt; 如果a是false. 结果肯定是false, 右面的b的判断和操作就省略了….</p>
<ol start="2">
<li><p>|, || 逻辑或, 就是或者的意思. 左面是false, 右面是true, 结果是true, 左面是false, 右面也是false 结果才是false.</p>
<p>只是有true, 结果一定是true, 除非全是false才是false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1 = <span class="keyword">true</span>;</span><br><span class="line">b2 = <span class="keyword">false</span>;</span><br><span class="line">b1 || b2;<span class="comment">// ==&gt; true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>短路或 : </p>
<p>a || b =&gt; 如果有a是false, 需要继续判断b, 如果b也是false, 结果就是false, 如果b是true, 结果就是true</p>
<p>a || b =&gt; 如果有a是true, 结果一定是true, 右面的b的判断的操作就省略了…</p>
<ol start="3">
<li><p>! 是单目运算, 一元运算, 针对一个boolean值, 取它的相反</p>
<p>!a.  如果a是true, 结果就是false</p>
<p>!a.  如果a是false, 结果就是true</p>
</li>
</ol>
<h3 id="2-10-5-赋值运算符"><a href="#2-10-5-赋值运算符" class="headerlink" title="2.10.5 赋值运算符"></a>2.10.5 赋值运算符</h3><p>最重要的运算符</p>
<p>左 = 右. </p>
<p>左面必须是变量.   把右面的确定的量值写入左面的变量映射的内存空间.</p>
<p>int a;</p>
<p>赋值表达式本身有值, 它的值就是最右值 …</p>
<p>System.out.println(a = 20); // 不会再从a中复制值.</p>
<p>java中支持连续赋值</p>
<p>int a, b, c, d;</p>
<p>a = b = c = d = 50;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+=  将左边变量的值和右边的常量值/变量值/表达式的值进行相加，最后将结果赋值给左边的变量 </span><br><span class="line"></span><br><span class="line">-=  将左边变量的值和右边的常量值/变量值/表达式的值进行相减，最后将结果赋值给左边的变量 </span><br><span class="line"></span><br><span class="line">*=  将左边变量的值和右边的常量值/变量值/表达式的值进行相乘，最后将结果赋值给左边的变量  </span><br><span class="line"></span><br><span class="line">/=  将左边变量的值和右边的常量值/变量值/表达式的值进行相除，最后将结果赋值给左边的变量</span><br></pre></td></tr></table></figure>



<p>int a = 20;</p>
<p>a += 30;  // a = a + 30 =&gt; a : 50</p>
<p><strong>累加, 不会有任何数据类型的变化的波动.</strong></p>
<p>a += 5.8;  //a = a + 5.8. =&gt; 55</p>
<p><strong>累操作的最大特点就是不用再考虑类型的变化.</strong></p>
<p>byte b = 127;</p>
<p>b += 5; // b = b + 5;</p>
<h1 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3. 流程控制语句"></a>3. 流程控制语句</h1><h2 id="3-1-分支语句"><a href="#3-1-分支语句" class="headerlink" title="3.1 分支语句"></a>3.1 分支语句</h2><h3 id="3-1-1-三目运算符"><a href="#3-1-1-三目运算符" class="headerlink" title="3.1.1 三目运算符"></a>3.1.1 三目运算符</h3><p>变量 = 布尔表达式 ? 表达式1 : 表达式2;</p>
<p>double a = (20 &lt; 4) ? 10 : 30.0; </p>
<h3 id="3-1-2-流程控制之分支"><a href="#3-1-2-流程控制之分支" class="headerlink" title="3.1.2 流程控制之分支"></a>3.1.2 流程控制之分支</h3><p>根据条件, 有选择性地执行某段代码</p>
<p><strong>if…else…</strong></p>
<ol>
<li><p>非分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">	语句块; <span class="comment">// 如果布尔表达式为true时执行. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>二分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">	语句块<span class="number">1</span>;  <span class="comment">// 布尔表达式为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	语句块<span class="number">2</span>;  <span class="comment">// 布尔表达式为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语句块之间的关系是互斥和对立.</strong></p>
</li>
<li><p>多分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">	语句块<span class="number">1</span>; <span class="comment">// 布尔表达式1为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">	语句块<span class="number">2</span>; <span class="comment">// 布尔表达式1为false, 并且布尔表达式2为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>) &#123;</span><br><span class="line">	语句块<span class="number">3</span>; <span class="comment">// 布尔表达式1为false, 并且布尔表达式2为false, 并且布尔表达式3为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">4</span> ) &#123;</span><br><span class="line">	语句块<span class="number">4</span>; <span class="comment">// 布尔表达式1为false, 并且布尔表达式2为false, 并且布尔表达式3为false, 并且布尔表达式4为true</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>switch case</strong></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (变量名) &#123;</span><br><span class="line">  <span class="keyword">case</span> : 常量<span class="number">1</span></span><br><span class="line">    执行语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> : 常量<span class="number">2</span></span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> : 常量<span class="number">3</span></span><br><span class="line">    执行语句<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">default</span> : </span><br><span class="line">    执行语句n;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>break不是必须要写的，如果不写break会发生穿透，case后边的都会执行，直到遇到break或者执行到switch代码块结束</li>
</ul>
<h2 id="3-2-循环语句"><a href="#3-2-循环语句" class="headerlink" title="3.2 循环语句"></a>3.2 循环语句</h2><p>在某种条件的满足下，反复执行特定的代码功能。</p>
<p>循环语句组成部分:</p>
<ol>
<li>初始化语句</li>
<li>循环条件语句</li>
<li>循环体</li>
<li>迭代语句</li>
</ol>
<h3 id="3-2-1-while-循环"><a href="#3-2-1-while-循环" class="headerlink" title="3.2.1 while 循环"></a>3.2.1 while 循环</h3><p>while循环语句的基本格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[初始化语句]</span><br><span class="line">while(循环条件语句)&#123;</span><br><span class="line">	循环体语句；</span><br><span class="line">	[迭代语句]；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>while (循环条件)中循环条件必须是Boolean类型</p>
<p><strong>执行流程：</strong></p>
<ul>
<li>第一步：执行初始化语句</li>
<li>第二步： 执行循环条件语句，看循环条件语句的值是true还是false；<ul>
<li>如果是true,执行第二步</li>
<li>如果是false,循环语句结束，循环不再执行</li>
</ul>
</li>
<li>第三步：执行循环体语句；</li>
<li>第四步：执行迭代语句</li>
</ul>
<p>循环条件成立就执行循环体语句。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05While</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">            result += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;result：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-do…-while-循环"><a href="#3-2-2-do…-while-循环" class="headerlink" title="3.2.2 do…. while 循环"></a>3.2.2 do…. while 循环</h3><p>do…while循环语句格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[初始化语句；]</span><br><span class="line">do&#123;</span><br><span class="line">	循环体语句；</span><br><span class="line">    [迭代语句;]</span><br><span class="line">&#125;while (循环条件语句)；</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>while(循环条件)中循环条件必须是boolean类型</li>
<li>do{}while();最后有一个分号</li>
<li>do…while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li>
</ul>
<p><strong>执行流程：</strong></p>
<ul>
<li>第一步：初始化语句；</li>
<li>第二步 : 执行循环体语句</li>
<li>第三步 : 执行迭代语句</li>
<li>第四步：执行循环条件语句，看循环条件语句的值是true，还是false；<ul>
<li>如果是true，执行第二步；</li>
<li>如果是false，循环语句终止，循环不再执行。</li>
</ul>
</li>
</ul>
<p>do…while循环至少执行一次循环体。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05doWhile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            result += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-for-循环"><a href="#3-2-3-for-循环" class="headerlink" title="3.2.3 for 循环"></a>3.2.3 for 循环</h3><p>for循环语句格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(初始化语句A; 循环条件语句B; 迭代语句C) &#123;</span><br><span class="line">	循环体语句D; </span><br><span class="line">&#125;</span><br><span class="line">A B D C B D C B D ....... C B D ..... B</span><br><span class="line">迭代语句C是每次循环的开始!!!!</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>for(;;)中的两个；是不能多也不能少</li>
<li>循环条件必须是boolean类型</li>
</ul>
<p><strong>执行流程：</strong></p>
<ul>
<li><p>第一步：执行初始化语句A</p>
</li>
<li><p>第二步：执行循环条件语句B，看循环条件语句的值是true，还是false；</p>
<ul>
<li>如果是true，执行第三步；</li>
<li>如果是false，循环语句中止，循环不再执行。</li>
</ul>
</li>
<li><p>第三步：执行循环体语句D</p>
</li>
<li><p>第四步：执行迭代语句C</p>
</li>
<li><p>第五步：执行循环条件，重新从第二步开始再执行一遍</p>
</li>
</ul>
<p>使用for循环重复执行某些语句。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01For</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;result : &quot;</span> + result);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-4-死循环"><a href="#3-2-4-死循环" class="headerlink" title="3.2.4 死循环"></a>3.2.4 死循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    循环体语句块；<span class="comment">//如果循环体中没有跳出循环体的语句，那么就是死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-无限循环"><a href="#3-2-5-无限循环" class="headerlink" title="3.2.5 无限循环"></a>3.2.5 无限循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125; <span class="keyword">while</span> (flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;flag;)&#123;</span><br><span class="line">    循环体语句块；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-6-循环语句的区别"><a href="#3-2-6-循环语句的区别" class="headerlink" title="3.2.6 循环语句的区别"></a>3.2.6 循环语句的区别</h3><ul>
<li><p>从循环次数角度分析</p>
<ul>
<li>do…while循环至少执行一次循环体语句</li>
<li>for和while循环先循环条件语句是否成立，然后决定是否执行循环体，至少执行零次循环体语句</li>
</ul>
</li>
<li><p>如何选择</p>
<ul>
<li>遍历有明显的循环次数（范围）的需求，选择for循环</li>
<li>遍历没有明显的循环次数（范围）的需求，循环while循环</li>
<li>如果循环体语句块至少执行一次，可以考虑使用do…while循环</li>
<li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li>
</ul>
</li>
<li><p>三种循环结构都具有四要素：</p>
<ul>
<li>循环变量的初始化表达式</li>
<li>循环条件</li>
<li>循环变量的修改的迭代表达式</li>
<li>循环体语句块</li>
</ul>
</li>
</ul>
<h3 id="3-2-7-循环嵌套"><a href="#3-2-7-循环嵌套" class="headerlink" title="3.2.7 循环嵌套"></a>3.2.7 循环嵌套</h3><p><strong>所谓嵌套循环</strong>，是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。当然可以是三种循环任意互相嵌套。</p>
<p>例如：两个for嵌套循环格式    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句A; 循环条件语句B; 迭代语句C) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化语句D; 循环条件语句E; 迭代语句F) &#123;</span><br><span class="line">      	循环体语句G;</span><br><span class="line">    &#125;</span><br><span class="line">    循环体语句H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">A <span class="title">B</span> <span class="params">(D E G F E G .... F E G... E)</span> H C <span class="title">B</span> <span class="params">(D E G F E G .... F E G... E)</span> ... B</span></span><br></pre></td></tr></table></figure>

<p><strong>执行特点：</strong>外循环执行一次，内循环执行一轮。</p>
<h3 id="3-2-8-循环代码"><a href="#3-2-8-循环代码" class="headerlink" title="3.2.8 循环代码"></a>3.2.8 循环代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * while 循环 : 先判断后循环, 循环0~N次</span></span><br><span class="line"><span class="comment"> * do while 循环 : 先循环后判断, 循环1~N次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 死循环 : 循环后面的语句永远无法到达的.</span></span><br><span class="line"><span class="comment"> * 无限循环 : 循环后面语句有可能到达的.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * while, do while 适用于循环次数不确定的循环.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * y = ki + b; k就是斜率,</span></span><br><span class="line"><span class="comment"> *  如果k是正数, y会随着i的增加而增加</span></span><br><span class="line"><span class="comment"> *  如果k是负数, y会随着i的增加而减少.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  打印高度为5的等腰3角形</span></span><br><span class="line"><span class="comment">                i       空格      *</span></span><br><span class="line"><span class="comment">     *          0       4        1</span></span><br><span class="line"><span class="comment">    ***         1       3        3</span></span><br><span class="line"><span class="comment">   *****        2       2        5</span></span><br><span class="line"><span class="comment">  *******       3       1        7</span></span><br><span class="line"><span class="comment"> *********      4       0        9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span> * i + <span class="number">4</span>; j++) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找出100以内的质数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main10</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 列出100以内的所有质数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 尝试推翻</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 提前中断了推翻的过程, 因为没有必要了, 反例只要一个即可.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      System.out.println(i + <span class="string">&quot;是质数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 列出100以内的所有质数</span></span><br><span class="line">  l1 : <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span> l1; <span class="comment">// i不是质数, 制造意外, 直接进入下一个i的处理.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i + <span class="string">&quot;是质数&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
</search>
