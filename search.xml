<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList源码分析</title>
    <url>/2021/04/18/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h1 id="ArrayList集合源码分析"><a href="#ArrayList集合源码分析" class="headerlink" title="ArrayList集合源码分析"></a>ArrayList集合源码分析</h1><p><strong>ArrayList的扩容机制</strong></p>
<ul>
<li><p>ArrayList中维护了一个Object类型的数组elementData</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// 非私有，以简化嵌套类访问非私有，以简化嵌套类访问</span></span><br></pre></td></tr></table></figure></li>
<li><p>当创建ArrayList对象时，如果使用的是无参构造器，则初始elementData容量为0，第一次添加，则扩容elementData为10，如果需要再次扩容，则扩容elementData为1.5倍。</p>
</li>
<li><p>如果是使用的指定大小的构造器，则初始elementData容量为指定大小，如果需要扩容，则直接扩容elementData为1.5倍。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ArrayList集合源码解读</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList arrayList = <span class="keyword">new</span> ArrayList();	<span class="comment">//见第1点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++) &#123;</span><br><span class="line">            arrayList.add(i);	<span class="comment">//见第2点</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arrayList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>1.无参构造器，初始elementData的容量为0</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2.add方法,add()方法内部</strong><br>   2.1 E e：这个方法的入参类型是一个泛型，可以是String,Student等类型<br>   2.2 ensureCapacityInternal(size + 1) ：首先进入这个方法判断是否需要扩容<br>   2.3 elementData[size++] = e ：将要添加的元素的值赋给数组的第size个元素，然后size自增1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.ensureCapacityInternal(size + 1)方法内部</strong><br>   3.1 int minCapacity：字面意思 最小容量<br>   3.2 calculateCapacity(elementData, minCapacity) ： 分析见第4点<br>   3.3 ensureExplicitCapacity(calculateCapacity(elementData, minCapacity)) ：分析见第5点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minCapacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>4.calculateCapacity(elementData, minCapacity)方法内部</strong><br>      4.1 判断elementData的容量是否为0，如果为0，返回一个默认值：10；如果不为0，则直接返回传过来的最小容量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5.ensureExplicitCapacity(calculateCapacity(elementData, minCapacity))方法内部</strong><br>      5.1 int minCapacity：将上一个方法确定的最终的容量传进来<br>      5.2 modCount++ ：modCount自增1，modCount表示修改次数，每增加一个元素，modCount都会增加1<br>           <em><strong>拓展</strong></em>：在这些线程不安全的集合中，在某些方法中，初始化迭代器时会给这个modCount赋值，<br>           如果在遍历的过程中，一旦发现这个对象的modCount和迭代器存储的modCount不一样，就会报错。<br>      5.3 minCapacity与elementData的长度进行比较，如果大于0，就会进行扩容（grow(minCapacity)方法见第6点），否则直接返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6.grow(int minCapacity)方法，真正扩容的地方</strong><br>  6.1 定义oldCapacity、newCapacity两个容量分别表示原来的容量和最新的容量。<br>        oldCapacity的大小为elementData的大小<br>        newCapacity的大小为原来的1.5倍<br>  6.2 判断最新的容量和需要的最小容量进行比较，如果最新的容量比需要的最小容量还要小，那么将最新的容量更新为所需要的最小        的容量；否则不变<br>  6.3 判断最新的容量是否大于规定的最大容量（一般不会），hugeCapacity(minCapacity)方法暂不分析<br>  6.4 Arrays.copyOf(elementData, newCapacity)：将elementData进行扩容，扩容至最新的大小</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello Hexo</title>
    <url>/2020/12/20/Hello-Hexo/</url>
    <content><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br>hexo官网： <a href="http://hexo.io/">http://hexo.io</a></p>
<h1 id="Hexo优势"><a href="#Hexo优势" class="headerlink" title="Hexo优势"></a>Hexo优势</h1><p>由于github pages存放的都是静态文件，hexo所做的就是将md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<p>Hexo具有以下特点：</p>
<ul>
<li>超快速度：Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染</li>
<li>支持 Markdown：Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件</li>
<li>一键部署：只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。</li>
<li>丰富的插件：Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScrip</li>
</ul>
<h1 id="Hexo搭建流程"><a href="#Hexo搭建流程" class="headerlink" title="Hexo搭建流程"></a>Hexo搭建流程</h1><h2 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h2><ul>
<li><a href="https://gitforwindows.org/">git</a></li>
<li><a href="https://nodejs.org/en/">Node.js</a>（下载安装LTS版本）</li>
</ul>
<p>安装的时候一直”next”即可，这里就不详细赘述。</p>
<h2 id="2、使用hexo来正式搭建博客"><a href="#2、使用hexo来正式搭建博客" class="headerlink" title="2、使用hexo来正式搭建博客"></a>2、使用hexo来正式搭建博客</h2><h3 id="2-1、安装hexo"><a href="#2-1、安装hexo" class="headerlink" title="2.1、安装hexo"></a>2.1、安装hexo</h3><ul>
<li><p>win+r，打开cmd控制台</p>
</li>
<li><p>添加国内镜像(这里我们使用阿里的国内镜像进行加速)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li>
<li><p>通过cnpm来安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>
<li><p>新建一个文件夹(位置自己选，手动新建即可)</p>
</li>
</ul>
<h3 id="2-2、初始化博客"><a href="#2-2、初始化博客" class="headerlink" title="2.2、初始化博客"></a>2.2、初始化博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>初始化完成之后会显示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO Start blogging with Hexo!</span><br></pre></td></tr></table></figure>

<h3 id="2-3、启动博客"><a href="#2-3、启动博客" class="headerlink" title="2.3、启动博客"></a>2.3、启动博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s <span class="comment">#等价于 hexo server ，hexo 会监视文件变动并自动更新，除修改站点配置文件外，无须重启服务器，直接刷新网页即可生效。</span></span><br></pre></td></tr></table></figure>

<p>至此，博客即在<strong><a href="http://localhost:4000/">http://localhost:4000</a></strong>启动，可以通过浏览器查看。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>反射（Reflection）入门案例</title>
    <url>/2021/06/13/%E5%8F%8D%E5%B0%84%EF%BC%88Reflection%EF%BC%89%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="Java反射入门（1）"><a href="#Java反射入门（1）" class="headerlink" title="Java反射入门（1）"></a>Java反射入门（1）</h1><p>​        一直听说反射很重要，但是之前一直没有用到过。最近在开发过程中，发现之前很多大佬用了反射，当时就感觉非常的高大上。于是乎，趁着端午节有时间，赶紧学习一波~</p>
<p>​        先举个栗子看看反射是怎么用的吧。</p>
<blockquote>
<p>需求：根据配置文件指定的信息，创建Hero对象并调用方法playHero.</p>
</blockquote>
<p>​        我们先创建两个类和一个配置文件：Hero.java 、 ReflectionDemo.java 、Hero.properties</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String hero1 = <span class="string">&quot;鲁班&quot;</span>;</span><br><span class="line">  	<span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playHero</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;本次使用-&quot;</span> + hero1 + <span class="string">&quot;-英雄&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​```properties</span><br><span class="line">classpath = com.yang.reflection.Hero</span><br><span class="line">method = playHero</span><br></pre></td></tr></table></figure>

<p>​        在这之前，我们是这样调用方法的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  	<span class="comment">//先new一个对象，然后进行调用</span></span><br><span class="line">    Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">    hero.playHero();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        如果用反射的话，是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">    Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">    properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/Users/qixiangyang/Documents/javaCode/leecodePractice/src/hero.properties&quot;</span>));</span><br><span class="line">    String classPath = properties.get(<span class="string">&quot;classpath&quot;</span>).toString();</span><br><span class="line">    String methodName = properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;classPath = &quot;</span> + classPath);</span><br><span class="line">    System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">    Class cls = Class.forName(classPath);</span><br><span class="line">    Object o = cls.newInstance();</span><br><span class="line">    Method method = cls.getMethod(methodName);</span><br><span class="line">    method.invoke(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先记住这种用法，具体的原理后续讲解！</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>反射（Reflection）讲解（一）</title>
    <url>/2021/06/14/%E5%8F%8D%E5%B0%84%EF%BC%88Reflection%EF%BC%89%E8%AE%B2%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="1-反射的原理"><a href="#1-反射的原理" class="headerlink" title="1.反射的原理"></a>1.反射的原理</h1><p><img src="https://techyang-blog-pic.oss-cn-beijing.aliyuncs.com/img/image-20210614230506004.png" alt="image-20210614230506004"></p>
<h1 id="2-反射相关类"><a href="#2-反射相关类" class="headerlink" title="2.反射相关类"></a>2.反射相关类</h1><ul>
<li>java.lang.Class</li>
<li>java.lang.reflect.Method</li>
<li>java.lang.reflect.Field</li>
<li>java.lang.reflect.Constructor</li>
</ul>
<h2 id="2-1-java-lang-Class"><a href="#2-1-java-lang-Class" class="headerlink" title="2.1 java.lang.Class"></a>2.1 java.lang.Class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">  <span class="comment">//通过Properties类 读写配置文件</span></span><br><span class="line">  Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">  properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/Users/qixiangyang/Documents/javaCode/leecodePractice/src/hero.properties&quot;</span>));</span><br><span class="line">  String classPath = properties.get(<span class="string">&quot;classpath&quot;</span>).toString();</span><br><span class="line">  String methodName = properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">  System.out.println(<span class="string">&quot;classPath = &quot;</span> + classPath);</span><br><span class="line">  System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//加载类，生成Class类型的对象</span></span><br><span class="line">  Class cls = Class.forName(classPath);</span><br><span class="line">  <span class="comment">//通过 cls 得到加载的类的对象实例</span></span><br><span class="line">  Object o = cls.newInstance();</span><br><span class="line">  System.out.println(cls);	<span class="comment">//输出内容：class com.yang.reflection.Hero</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-2-java-lang-reflect-Method"><a href="#2-2-java-lang-reflect-Method" class="headerlink" title="2.2 java.lang.reflect.Method"></a>2.2 java.lang.reflect.Method</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">  Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">  properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/Users/qixiangyang/Documents/javaCode/leecodePractice/src/hero.properties&quot;</span>));</span><br><span class="line">  String classPath = properties.get(<span class="string">&quot;classpath&quot;</span>).toString();</span><br><span class="line">  String methodName = properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">  System.out.println(<span class="string">&quot;classPath = &quot;</span> + classPath);</span><br><span class="line">  System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">  Class cls = Class.forName(classPath);</span><br><span class="line">  Object o = cls.newInstance();</span><br><span class="line">  <span class="comment">//通过cls 得到加载类中的方法对象</span></span><br><span class="line">  <span class="comment">//在反射中，将方法视为对象（万物皆对象的理解）</span></span><br><span class="line">  Method method = cls.getMethod(methodName);</span><br><span class="line">  <span class="comment">//通过反射执行对应的方法</span></span><br><span class="line">  method.invoke(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-3-java-lang-reflect-Field"><a href="#2-3-java-lang-reflect-Field" class="headerlink" title="2.3 java.lang.reflect.Field"></a>2.3 java.lang.reflect.Field</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">  Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">  properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/Users/qixiangyang/Documents/javaCode/leecodePractice/src/hero.properties&quot;</span>));</span><br><span class="line">  String classPath = properties.get(<span class="string">&quot;classpath&quot;</span>).toString();</span><br><span class="line">  String methodName = properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">  System.out.println(<span class="string">&quot;classPath = &quot;</span> + classPath);</span><br><span class="line">  System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">  Class cls = Class.forName(classPath);</span><br><span class="line">  Object o = cls.newInstance();</span><br><span class="line">  System.out.println(cls);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//字段的值  字段的修饰符不能是私有的，如果是私有的话，程序会报错</span></span><br><span class="line">  Field fieldName = cls.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">  System.out.println(fieldName.get(o));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-4-java-lang-reflect-Constructor"><a href="#2-4-java-lang-reflect-Constructor" class="headerlink" title="2.4 java.lang.reflect.Constructor"></a>2.4 java.lang.reflect.Constructor</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException </span>&#123;</span><br><span class="line">  Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">  properties.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/Users/qixiangyang/Documents/javaCode/leecodePractice/src/hero.properties&quot;</span>));</span><br><span class="line">  String classPath = properties.get(<span class="string">&quot;classpath&quot;</span>).toString();</span><br><span class="line">  String methodName = properties.get(<span class="string">&quot;method&quot;</span>).toString();</span><br><span class="line">  System.out.println(<span class="string">&quot;classPath = &quot;</span> + classPath);</span><br><span class="line">  System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);</span><br><span class="line"></span><br><span class="line">  Class cls = Class.forName(classPath);</span><br><span class="line">  Object o = cls.newInstance();</span><br><span class="line">  System.out.println(cls);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取到无参构造器</span></span><br><span class="line">  Constructor constructor01 = cls.getConstructor();</span><br><span class="line">  System.out.println(constructor01);	<span class="comment">//	public com.yang.reflection.Hero()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//获取到有参构造器</span></span><br><span class="line">  Constructor constructor02 = cls.getConstructor(String.class);</span><br><span class="line">  System.out.println(constructor02);	<span class="comment">//	public com.yang.reflection.Hero(java.lang.String)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="3-反射调用优化"><a href="#3-反射调用优化" class="headerlink" title="3. 反射调用优化"></a>3. 反射调用优化</h1><blockquote>
<p>传统方式与反射的用时比较</p>
</blockquote>
<p>传统方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">  <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">90000000</span>;i++)&#123;</span><br><span class="line">    hero.playHero();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">  System.out.println(<span class="string">&quot;m1()耗时：&quot;</span> + (end-start));	<span class="comment">//	m1()耗时：5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>反射：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">  Class cls = Class.forName(<span class="string">&quot;com.yang.reflection.Hero&quot;</span>);</span><br><span class="line">  Object o = cls.newInstance();</span><br><span class="line">  <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">90000000</span>;i++)&#123;</span><br><span class="line">    Method playHero = cls.getMethod(<span class="string">&quot;playHero&quot;</span>);</span><br><span class="line">    playHero.invoke(o);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">  System.out.println(<span class="string">&quot;m2()耗时：&quot;</span> + (end-start));	<span class="comment">//  m2()耗时：12364</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据两个方法执行的结果可以看出，通过反射的方式调用方法是非常耗时的！</p>
<blockquote>
<p>反射调用的优化</p>
</blockquote>
<p><strong>关闭访问检查</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class="line">  Class cls = Class.forName(<span class="string">&quot;com.yang.reflection.Hero&quot;</span>);</span><br><span class="line">  Object o = cls.newInstance();</span><br><span class="line">  <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">90000000</span>;i++)&#123;</span><br><span class="line">    Method playHero = cls.getMethod(<span class="string">&quot;playHero&quot;</span>);</span><br><span class="line">    <span class="comment">//关闭访问检查 设为true</span></span><br><span class="line">    playHero.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    playHero.invoke(o);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">  System.out.println(<span class="string">&quot;m3()耗时：&quot;</span> + (end-start));	<span class="comment">//  m3()耗时：11708</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与m2()方法相比，时间上确实缩短了一些，但是效果其实并不是很明显！</p>
<h1 id="4-Class类常用方法"><a href="#4-Class类常用方法" class="headerlink" title="4.Class类常用方法"></a>4.Class类常用方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchFieldException </span>&#123;</span><br><span class="line">  String classAllPath = <span class="string">&quot;com.yang.reflection.Hero&quot;</span>;</span><br><span class="line">  <span class="comment">//1. 获取到Hero类 对应的 Class对象</span></span><br><span class="line">  <span class="comment">//  &lt;?&gt;  表示不确定的Java类型</span></span><br><span class="line">  Class&lt;?&gt; cls = Class.forName(classAllPath);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. 输出cls</span></span><br><span class="line">  System.out.println(cls);    <span class="comment">// class com.yang.reflection.Hero</span></span><br><span class="line">  System.out.println(cls.getClass());     <span class="comment">// class java.lang.Class</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//3. 得到包名</span></span><br><span class="line">  System.out.println(cls.getPackage());   <span class="comment">// package com.yang.reflection</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//4. 得到全类名</span></span><br><span class="line">  System.out.println(cls.getName());      <span class="comment">// com.yang.reflection.Hero</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//5. 通过cls创建对象实例</span></span><br><span class="line">  Hero hero = (Hero)cls.newInstance();</span><br><span class="line">  System.out.println(hero);   <span class="comment">// Hero&#123;heroName=&#x27;鲁班&#x27;, orientation=&#x27;射手&#x27;, skillName=&#x27;火力压制&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//6. 通过反射获取属性</span></span><br><span class="line">  Field heroName = cls.getField(<span class="string">&quot;heroName&quot;</span>);</span><br><span class="line">  System.out.println(heroName.get(hero));     <span class="comment">// 鲁班</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//7. 给属性赋值</span></span><br><span class="line">  heroName.set(hero,<span class="string">&quot;后羿&quot;</span>);</span><br><span class="line">  System.out.println(heroName.get(hero));     <span class="comment">// 后羿</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//8. 获取所有属性</span></span><br><span class="line">  Field[] heroFields = cls.getFields();</span><br><span class="line">  System.out.println(<span class="string">&quot;Hero类所有的属性如下:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (Field field:heroFields)&#123;</span><br><span class="line">    System.out.println(field.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>本篇文章参考<a href="https://space.bilibili.com/651245581">韩顺平老师</a>的视频所整理。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java之BigDecimal详解</title>
    <url>/2020/12/27/BigDecimal%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="Java之BigDecimal详解"><a href="#Java之BigDecimal详解" class="headerlink" title="Java之BigDecimal详解"></a>Java之BigDecimal详解</h1><p>Java在java.math包中提供的API类BigDecimal，用来对超过16位有效位的数进行精确的运算。双精度浮点型变量double可以处理16位有效数，但在实际应用中，可能需要对更大或者更小的数进行运算和处理。一般情况下，对于那些不需要准确计算精度的数字，我们可以直接使用Float和Double处理，但是Double.valueOf(String) 和Float.valueOf(String)会丢失精度。所以开发中，如果我们需要精确计算的结果，则必须使用BigDecimal类来操作。BigDecimal所创建的是对象，故我们不能使用传统的+、-、*、/等算术运算符直接对其对象进行数学运算，而必须调用其相对应的方法。方法中的参数也必须是BigDecimal的对象。</p>
<h2 id="1-1、常用构造函数"><a href="#1-1、常用构造函数" class="headerlink" title="1.1、常用构造函数"></a>1.1、常用构造函数</h2><ol>
<li><p>BigDecimal(int)</p>
<p>创建一个具有参数所指定整数值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为int类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	输出结果：</span></span><br><span class="line"><span class="comment">	BigDecimal的参数为int类型：1</span></span><br><span class="line"><span class="comment">	 */</span></span><br></pre></td></tr></table></figure></li>
<li><p>BigDecimal(double)</p>
<p>创建一个具有参数所指定双精度值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1.1</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="number">1.11</span>);</span><br><span class="line">    BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="number">1.111</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + b );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + c );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.100000000000000088817841970012523233890533447265625</span></span><br><span class="line"><span class="comment">    ===============================</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.1100000000000000976996261670137755572795867919921875</span></span><br><span class="line"><span class="comment">    ===============================</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.1109999999999999875655021241982467472553253173828125</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></li>
<li><p>BigDecimal(long)</p>
<p>创建一个具有参数所指定长整数值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">111111111111111111L</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为long类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为long类型：111111111111111111</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></li>
<li><p>BigDecimal(String)  <strong>常用</strong></p>
<p>创建一个具有参数所指定以字符串表示的数值的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.000010111111111111111111111111111&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为String类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为String类型：1.000010111111111111111111111111111</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>BigDecimal(double)  与  BigDecimal(String) </p>
</blockquote>
<p>先看例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="number">1.1</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.1&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为double类型：&quot;</span> + a );</span><br><span class="line">    System.out.println(<span class="string">&quot;===============================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;BigDecimal的参数为String类型：&quot;</span> + b );</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为double类型：1.100000000000000088817841970012523233890533447265625</span></span><br><span class="line"><span class="comment">    ===============================</span></span><br><span class="line"><span class="comment">    BigDecimal的参数为String类型：1.1</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<p>原因：</p>
<p>1）参数类型为double的构造方法的结果有一定的不可预知性。有人可能认为在Java中写入newBigDecimal(0.1)所创建的BigDecimal正好等于 0.1（非标度值 1，其标度为 1），但是它实际上等于0.1000000000000000055511151231257827021181583404541015625。这是因为0.1无法准确地表示为 double（或者说对于该情况，不能表示为任何有限长度的二进制小数）。这样，传入到构造方法的值不会正好等于 0.1（虽然表面上等于该值）。</p>
<p>2）String 构造方法是完全可预知的：写入 newBigDecimal(“0.1”) 将创建一个 BigDecimal，它正好等于预期的 0.1。因此，比较而言， 通常建议优先使用String构造方法。</p>
<p>3）当double必须用作BigDecimal的源时，请注意，此构造方法提供了一个准确转换；它不提供与以下操作相同的结果：先使用Double.toString(double)方法，然后使用BigDecimal(String)构造方法，将double转换为String。要获取该结果，请使用static valueOf(double)方法。</p>
<h2 id="1-2、BigDecimal常用方法详解"><a href="#1-2、BigDecimal常用方法详解" class="headerlink" title="1.2、BigDecimal常用方法详解"></a>1.2、BigDecimal常用方法详解</h2><ol>
<li><p>加减乘除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;3.1&quot;</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;6.6&quot;</span>);</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    BigDecimal addResult = a.add(b);</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    BigDecimal subResult = a.subtract(b);</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    BigDecimal mulResult = a.multiply(b);</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    BigDecimal divResult = a.divide(b,<span class="number">2</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;加法运算结果--------&gt;&quot;</span> + addResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;减法运算结果--------&gt;&quot;</span> + subResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;乘法运算结果--------&gt;&quot;</span> + mulResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;除法运算结果--------&gt;&quot;</span> + divResult);</span><br><span class="line">    System.out.println(<span class="string">&quot;=================================&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    加法运算结果--------&gt;9.7</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    减法运算结果--------&gt;-3.5</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    乘法运算结果--------&gt;20.46</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    除法运算结果--------&gt;0.5</span></span><br><span class="line"><span class="comment">    =================================</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>在做除法运算时，可能会出现除不尽的情况，这个时候会报异常！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span><br><span class="line">	at java.math.BigDecimal.divide(BigDecimal.java:1693)</span><br><span class="line">	at org.sang.service.ArticleService.main(ArticleService.java:166)</span><br></pre></td></tr></table></figure>

<p>解决方案：给divide方法设置精确的小数点，如：divide(xxxxx,2)</p>
</li>
<li><p>比较大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;3.1&quot;</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;6.6&quot;</span>);</span><br><span class="line">    BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line">    BigDecimal d = <span class="keyword">new</span> BigDecimal(<span class="string">&quot;5.5&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较大小</span></span><br><span class="line">    <span class="keyword">int</span> result1 = a.compareTo(b);</span><br><span class="line">    <span class="keyword">int</span> result2 = b.compareTo(c);</span><br><span class="line">    <span class="keyword">int</span> result3 = c.compareTo(c);</span><br><span class="line">    System.out.println(<span class="string">&quot;小于----------&gt;&quot;</span> + result1);</span><br><span class="line">    System.out.println(<span class="string">&quot;大于----------&gt;&quot;</span> + result2);</span><br><span class="line">    System.out.println(<span class="string">&quot;等于----------&gt;&quot;</span> + result3);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    输出结果：</span></span><br><span class="line"><span class="comment">    小于----------&gt;-1</span></span><br><span class="line"><span class="comment">    大于----------&gt;1</span></span><br><span class="line"><span class="comment">    等于----------&gt;0</span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure>

<p>在开发中进行比较是，如果是 小于 那个结果小于0；如果是 等于 那么结果等于0；如果是 大于 那么结果是大于0.</p>
</li>
</ol>
<h2 id="1-3、BigDecimal格式化"><a href="#1-3、BigDecimal格式化" class="headerlink" title="1.3、BigDecimal格式化"></a>1.3、BigDecimal格式化</h2><ol>
<li><p>BigDecimal格式化保留2为小数，不足则补0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatToNumber</span><span class="params">(BigDecimal obj)</span> </span>&#123;</span><br><span class="line">    DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">&quot;#.00&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0.00&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.compareTo(BigDecimal.ZERO)&gt;<span class="number">0</span>&amp;&amp;obj.compareTo(<span class="keyword">new</span> BigDecimal(<span class="number">1</span>))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>+df.format(obj).toString();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> df.format(obj).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="1-4、BigDecimal总结"><a href="#1-4、BigDecimal总结" class="headerlink" title="1.4、BigDecimal总结"></a>1.4、BigDecimal总结</h2><ol>
<li><p>总结</p>
<ul>
<li>在需要精确的小数计算时再使用BigDecimal，BigDecimal的性能比double和float差，在处理庞大，复杂的运算时尤为明显。故一般精度的计算没必要使用BigDecimal。</li>
<li>尽量使用参数类型为String的构造函数。</li>
<li>BigDecimal都是不可变的（immutable）的， 在进行每一次四则运算时，都会产生一个新的对象 ，所以在做加减乘除运算时要记得要保存操作后的值。</li>
</ul>
</li>
<li><p>工具类推荐</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vivo.ars.util;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于高精确处理常用的数学运算</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArithmeticUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//默认除法运算精度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEF_DIV_SCALE = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">add</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的加法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    加数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的和</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">add</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.add(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">sub</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">sub</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的减法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的差</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sub</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.subtract(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">mul</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">mul</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> round(b1.multiply(b2).doubleValue(), scale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的乘法运算</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    乘数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 保留scale 位小数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的积</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">mul</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.multiply(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算，当发生除不尽的情况时，精确到</span></span><br><span class="line"><span class="comment">     * 小数点以后10位，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> div(v1, v2, DEF_DIV_SCALE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示表示需要精确到小数点以后几位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">div</span><span class="params">(<span class="keyword">double</span> v1, <span class="keyword">double</span> v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(Double.toString(v1));</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(Double.toString(v2));</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供（相对）精确的除法运算。当发生除不尽的情况时，由scale参数指</span></span><br><span class="line"><span class="comment">     * 定精度，以后的数字四舍五入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 表示需要精确到小数点以后几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 两个参数的商</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">div</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        <span class="keyword">return</span> b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> v, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(Double.toString(v));</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供精确的小数位四舍五入处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v     需要四舍五入的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">round</span><span class="params">(String v, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b = <span class="keyword">new</span> BigDecimal(v);</span><br><span class="line">        <span class="keyword">return</span> b.setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">remainder</span><span class="params">(String v1, String v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">return</span> b1.remainder(b2).setScale(scale, BigDecimal.ROUND_HALF_UP).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取余数  BigDecimal</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1    被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2    除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 小数点后保留几位</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 余数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">remainder</span><span class="params">(BigDecimal v1, BigDecimal v2, <span class="keyword">int</span> scale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (scale &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                <span class="string">&quot;The scale must be a positive integer or zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1.remainder(v2).setScale(scale, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比较大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v1 被比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> v2 比较数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果v1 大于v2 则 返回true 否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compare</span><span class="params">(String v1, String v2)</span> </span>&#123;</span><br><span class="line">        BigDecimal b1 = <span class="keyword">new</span> BigDecimal(v1);</span><br><span class="line">        BigDecimal b2 = <span class="keyword">new</span> BigDecimal(v2);</span><br><span class="line">        <span class="keyword">int</span> bj = b1.compareTo(b2);</span><br><span class="line">        <span class="keyword">boolean</span> res;</span><br><span class="line">        <span class="keyword">if</span> (bj &gt; <span class="number">0</span>)</span><br><span class="line">            res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>BigDecimal</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE基础语法</title>
    <url>/2023/04/23/JavaSE%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="1-第一个程序"><a href="#1-第一个程序" class="headerlink" title="1. 第一个程序"></a>1. 第一个程序</h1><blockquote>
<p>输出Hello World</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">主类：包含了主方法的类。</span></span><br><span class="line"><span class="comment">非主类：没有主方法的类。</span></span><br><span class="line"><span class="comment">公共类：有public修饰的类称为公共类，公共类的类名必须要和源文件名一致。</span></span><br><span class="line"><span class="comment">非公共类：没有public修饰的类,非公共类不可以跨包使用。</span></span><br><span class="line"><span class="comment">**********************************************************</span></span><br><span class="line"><span class="comment">public : 公共的.用于修饰符后面的东西</span></span><br><span class="line"><span class="comment">class : 类. 是java程序的最基本单位，一个java程序必须至少是一个类</span></span><br><span class="line"><span class="comment">Hello : 类名</span></span><br><span class="line"><span class="comment">类名后面的一对&#123;&#125;及其中的内容称为类体</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    方法（method）: 是java程序中的一个独立的功能的单位</span></span><br><span class="line"><span class="comment">    主方法：也称为入口方法，是程序的入口，写法固定</span></span><br><span class="line"><span class="comment">    public static 都是修饰符</span></span><br><span class="line"><span class="comment">    void 返回值类型</span></span><br><span class="line"><span class="comment">    main 方法名</span></span><br><span class="line"><span class="comment">    (String[] args) 参数</span></span><br><span class="line"><span class="comment">    方法名后面的一对&#123;&#125;及其中的内容成为方法体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        语句（statement）: 是java 程序中的最小执行单位，语句必须以;结尾</span></span><br><span class="line"><span class="comment">        语句必须是隶属于方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非主类 不能执行 非公共类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;输出test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主类 有入口文件 非公共类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello3</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello3&quot;</span>) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>语句隶属于方法；方法隶属于类。</p>
<h1 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2. 基础语法"></a>2. 基础语法</h1><h2 id="2-1-标识符的命名"><a href="#2-1-标识符的命名" class="headerlink" title="2.1 标识符的命名"></a>2.1 标识符的命名</h2><blockquote>
<p>标识符的命名规则（必须遵守的硬性规则）</p>
</blockquote>
<ul>
<li>有52个英文字母和10个数字、_和&amp;组成</li>
<li>数字不能开头</li>
<li>不能是关键字或者是保留字，但是可以包含</li>
<li>严格区分大小写</li>
<li>不能包含空格，长度为65535</li>
</ul>
<blockquote>
<p>标识符的命名规范</p>
</blockquote>
<ul>
<li><p>包名：全部小写，多个单词以.分割。例如：my.package</p>
</li>
<li><p>类、接口名首字母大写，后面的单词首字母大写</p>
</li>
<li><p>变量名，方法名，首字母小写，后面的单词首字母大写</p>
</li>
<li><p>常量名，全部大写 多个单词以 _ 分割</p>
</li>
</ul>
<h2 id="2-2-数据类型"><a href="#2-2-数据类型" class="headerlink" title="2.2 数据类型"></a>2.2 数据类型</h2><blockquote>
<p>基本数据类型</p>
</blockquote>
<p>整数</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">byte</td>
<td align="center">1</td>
<td align="center">-128~127</td>
</tr>
<tr>
<td align="center">short</td>
<td align="center">2</td>
<td align="center">-32768~32767</td>
</tr>
<tr>
<td align="center">int</td>
<td align="center">4</td>
<td align="center">-20多亿~20多亿</td>
</tr>
<tr>
<td align="center">long</td>
<td align="center">8</td>
<td align="center">-900多亿亿~900多亿亿</td>
</tr>
</tbody></table>
<p>浮点型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">float</td>
<td align="center">4</td>
<td align="center">-10^38~10^38</td>
</tr>
<tr>
<td align="center">double</td>
<td align="center">8</td>
<td align="center">-10^308~10^308</td>
</tr>
</tbody></table>
<p>字符型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">char</td>
<td align="center">2</td>
<td align="center">0~65535</td>
</tr>
</tbody></table>
<p>布尔型</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">占用字节</th>
<th align="center">范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boolean</td>
<td align="center">1</td>
<td align="center">true、false</td>
</tr>
</tbody></table>
<h2 id="2-3-变量声明以及初始化"><a href="#2-3-变量声明以及初始化" class="headerlink" title="2.3 变量声明以及初始化"></a>2.3 变量声明以及初始化</h2><p>变量：内存中的一块<code>被命名的</code>且有<code>特定数据类型</code>约束的<code>空间</code>, 此空间中可以保存一个数据类型要求的数据, 此空间中的<code>数据可以变化</code>.</p>
<p>常量：内存中的一块<code>空间</code>，可以保存一个数据，<code>数据不可改变</code>,包括字面量和用final修饰的量</p>
<blockquote>
<p>变量的分类</p>
</blockquote>
<p>按数据类型分类：<br>        基本数据类型：存放数据本身；<br>        引用数据类型：存放对象地址（内存中某个字节的编号），占用8个字节，编号为0的字节是null<br>按声明语句位置来分：<br>        局部变量：声明在方法中，范围小，寿命短。<br>        成员变量：声明在类中方法外的变量，范围大，寿命长。</p>
<blockquote>
<p>数据类型的作用</p>
</blockquote>
<ul>
<li>决定空间大小</li>
<li>决定了空间中可以保存什么数据</li>
<li>决定了空间中的数据可以做什么</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 变量声明 : 数据类型 变量名;</span></span><br><span class="line">        <span class="keyword">int</span> n1; <span class="comment">// 声明,在内存中开辟一块空间,4字节空间的大小,并且要用n1符号和这块空间映射起来.</span></span><br><span class="line">        n1 = <span class="number">30</span>; <span class="comment">// n1被赋值为30.从右向左,把右面的30的值写入左面的n1符号映射的空间.</span></span><br><span class="line">        System.out.println(n1); <span class="comment">// 根据n1符号,定位在内存空间中,并且把空间中的数据值30复制出来,再打印这个复制品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>变量的注意事项</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 注意点1：必须要有数据类型和变量名</span></span><br><span class="line">        <span class="comment">//int = 50;</span></span><br><span class="line">        <span class="comment">//b = 30;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点2：必须要先声明后在使用</span></span><br><span class="line">        <span class="comment">//System.out.println(n);</span></span><br><span class="line">        <span class="comment">//int n = 20;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点3：变量中的数据不可以超出范围，变量有其数据范围</span></span><br><span class="line">        <span class="comment">//short n = 20_0000_0000;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点4：变量有其作用范围，由其声明语句所隶属的&#123;&#125;决定</span></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        n = <span class="number">10</span>;</span><br><span class="line">        n = <span class="number">20</span>;</span><br><span class="line">        System.out.println(n); <span class="comment">// 没有问题</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点5：同一个作用范围内，变量不允许重复声明</span></span><br><span class="line">        <span class="comment">// short n;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(n);  // 在现在的作用范围内没有 n 变量;编译不通过</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">double</span> n = <span class="number">3.87</span>;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意点6：变量必须要经过初始化之后才能使用</span></span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        a = <span class="number">10</span>; <span class="comment">// 初始化赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 普通赋值</span></span><br><span class="line">        a = <span class="number">30</span>; <span class="comment">// 普通赋值</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>必须要有数据类型和变量名</li>
<li>必须要先声明后在使用</li>
<li>变量中的数据不可以超出范围，变量有其数据范围</li>
<li>变量有其作用范围，由其声明语句所隶属的{}决定</li>
<li>同一个作用范围内，变量不允许重复声明</li>
<li>变量必须要经过初始化之后才能使用</li>
</ul>
<h2 id="2-4-变量之间的赋值以及量值的类型"><a href="#2-4-变量之间的赋值以及量值的类型" class="headerlink" title="2.4 变量之间的赋值以及量值的类型"></a>2.4 变量之间的赋值以及量值的类型</h2><p>整数字面量默认使用int类型4字节空间来保存，此空间不允许被改写</p>
<p>浮点数字面量默认使用double型8字节空间保存，此空间不允许被改写</p>
<p>long型：后缀的L的作用就是提醒编译器，不要再使用默认的int类型，而是使用long型来保存这个字面量</p>
<p>float型：后缀F的作用就是提醒编译器，不要在使用默认的double类型，而是使用float类型来保存这个字面量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableType</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">10</span>; <span class="comment">// 10这个数据在内存用int型</span></span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">40</span>;</span><br><span class="line">        <span class="keyword">long</span> l2 = <span class="number">40_0000_0000L</span>;<span class="comment">// 后缀的L的作用就是提醒编译器，不要再使用默认的int类型，而是使用long型来保存这个字面量</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span> b2 = b1;</span><br><span class="line">        <span class="keyword">short</span> s2 = b1;</span><br><span class="line">        <span class="comment">//byte b3 = s1;</span></span><br><span class="line">        <span class="comment">// 强制类型转换 变量 = (目标值)值</span></span><br><span class="line">        <span class="keyword">byte</span> b3 = (<span class="keyword">byte</span>)s1; <span class="comment">// 强制类型转换有风险</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// *************************</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 100 = 100</span></span><br><span class="line">        <span class="comment">// 赋值符号的左面必须是变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//s1 = i1;</span></span><br><span class="line">        l1 = i1;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> i3 = <span class="number">20</span>;</span><br><span class="line">        s1 = i3;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// int i2 = l1;</span></span><br><span class="line">        <span class="keyword">int</span> i2 = (<span class="keyword">short</span>)l1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">.965</span>;</span><br><span class="line">        <span class="comment">// float f1 = d1;</span></span><br><span class="line">        <span class="keyword">float</span> f1 = (<span class="keyword">float</span>)d1;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f2 = (<span class="keyword">float</span>)<span class="number">2.5</span>;</span><br><span class="line">        <span class="keyword">float</span> f3 = <span class="number">3.6F</span>; <span class="comment">// 后缀F的作用就是提醒编译器，不要在使用默认的double类型，而是使用float类型来保存这个字面量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5-运算时数据类型的变化"><a href="#2-5-运算时数据类型的变化" class="headerlink" title="2.5 运算时数据类型的变化"></a>2.5 运算时数据类型的变化</h2><ul>
<li><p>任意非long整数变量运算，结果一定是int类</p>
</li>
<li><p>更多的类型混合运算时，会先找范围最大的那个类型，所有参加的数据都升级为最大的范围类型，结果肯定是范围最大的范围类型</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VariableCalc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">byte</span> b1 = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">short</span> s1 = <span class="number">22</span>;</span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">long</span> l1 = <span class="number">50</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// short s2 = b1 + l1;</span></span><br><span class="line">        <span class="keyword">short</span> s2 = (<span class="keyword">short</span>)(b1 + l1);</span><br><span class="line">        i1 = b1 + s1;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">float</span> f1 = <span class="number">3.5F</span>;</span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">5.3</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 右面的结果类型是double型</span></span><br><span class="line">        l1 = (<span class="keyword">long</span>)(i1 + f1 + d1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6-char-字符型"><a href="#2-6-char-字符型" class="headerlink" title="2.6 char 字符型"></a>2.6 char 字符型</h2><ul>
<li>char 数据类型在内存中占用 2 个字符；</li>
<li>2个字节的空间中保存字符对应的Unicode编码，取值范围是0~65535，码值为0的字符称为NULL字符</li>
<li>char 就是整数，正整数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;a&#x27;</span>; <span class="comment">// 字符字面量使用&#x27;&#x27;包围, 不能空, 必须保存一个字符</span></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;b&#x27;</span>; <span class="comment">// 根据右面的字符字面量&#x27;b&#x27;查表, 查到对应码值98, 把98存入c2字符型空间中</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c4 = <span class="string">&#x27;8&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c5 = <span class="string">&#x27;我&#x27;</span>;</span><br><span class="line">        <span class="keyword">char</span> c6 = <span class="string">&#x27;你&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CharTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 特殊字符，需要转义</span></span><br><span class="line">        <span class="comment">// \n : 换行</span></span><br><span class="line">        <span class="comment">// \r : 回车</span></span><br><span class="line">        <span class="comment">// \t : Tab键</span></span><br><span class="line">        <span class="comment">// \\ : \</span></span><br><span class="line">        <span class="comment">// \&quot; : &quot;</span></span><br><span class="line">        <span class="comment">// \&#x27; : &#x27;</span></span><br><span class="line">        <span class="comment">// \b : 删除键Backspace</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c1 = <span class="string">&#x27;\n&#x27;</span>; <span class="comment">// 换行</span></span><br><span class="line">        <span class="keyword">char</span> c2 = <span class="string">&#x27;\r&#x27;</span>; <span class="comment">// 回车</span></span><br><span class="line">        <span class="keyword">char</span> c3 = <span class="string">&#x27;\t&#x27;</span>; <span class="comment">// 制表符</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;abcdef\b\b\b1234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abcdef\r1234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abcdef\n1234&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;hello\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-7-boolean-布尔型"><a href="#2-7-boolean-布尔型" class="headerlink" title="2.7 boolean 布尔型"></a>2.7 boolean 布尔型</h2><ul>
<li><p>boolean 在内存中占用1个字节，没有范围，只允许2个值，true和false</p>
</li>
<li><p>boolean 数据类型和其他所有数据类型都不兼容</p>
</li>
<li><p>Boolean主要是用于控制分支和循环 </p>
</li>
</ul>
<h2 id="2-8-String-字符串"><a href="#2-8-String-字符串" class="headerlink" title="2.8 String 字符串"></a>2.8 String 字符串</h2><ul>
<li>String是引用型, 可以指向 一个字符串对象</li>
<li>字符串是内容不可改变的Unicode字符序列. 字符串可以使用 ‘+’ 拼接任意数据,会产生一个新的字符串对象, 内容就是拼接后的结果.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1;</span><br><span class="line">        s1 = <span class="string">&quot;abc&quot;</span>; <span class="comment">// 把右面的&quot;abc&quot;字符串对象地址写给s1引用变量</span></span><br><span class="line">        </span><br><span class="line">        s1 = s1 + <span class="number">100</span>; <span class="comment">// &quot;abc100&quot;</span></span><br><span class="line">        s1 = s1 + <span class="keyword">false</span>; <span class="comment">// &quot;abc100false&quot;</span></span><br><span class="line">        s1 = s1 + <span class="number">3.22</span>; <span class="comment">// &quot;abc100false3.22&quot;</span></span><br><span class="line">        s1 = s1 + <span class="string">&#x27;好&#x27;</span>; <span class="comment">// &quot;abc100false3.22好&quot;</span></span><br><span class="line">        s1 = s1 + <span class="string">&quot;不好&quot;</span>; <span class="comment">// &quot;abc100false3.22好不好&quot;</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        </span><br><span class="line">        String s2 = <span class="string">&quot;&quot;</span>; <span class="comment">// 空串, 空签子</span></span><br><span class="line">        String s3 = <span class="keyword">null</span>; <span class="comment">// 空 , 连签子也没有</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//s3 = s3 + 500;</span></span><br><span class="line">        <span class="comment">//System.out.println(s3);</span></span><br><span class="line">        s2 = s2 + <span class="number">600</span>;</span><br><span class="line">        System.out.println(s2); <span class="comment">// &quot;600&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// int =&gt; String </span></span><br><span class="line">        <span class="keyword">int</span> n1 = <span class="number">9832</span>;</span><br><span class="line">        <span class="comment">//String s4 = n1; //</span></span><br><span class="line">        String s4 = <span class="string">&quot;&quot;</span> + n1; <span class="comment">// &quot;9832&quot;</span></span><br><span class="line">        System.out.println(s4);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">double</span> d1 = <span class="number">3.9923</span>;</span><br><span class="line">        String s5 = <span class="string">&quot;&quot;</span> + d1;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String str1 = 4;        							//判断对错：</span></span><br><span class="line">        String str2 = <span class="number">3.5f</span> + <span class="string">&quot;&quot;</span>;             		<span class="comment">//判断str2对错：t</span></span><br><span class="line">        System.out.println(str2);        				<span class="comment">//输出：3.5?</span></span><br><span class="line">        System.out.println(<span class="number">3</span> + <span class="number">4</span> + <span class="string">&quot;Hello!&quot;</span>); 	<span class="comment">//输出：7Hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span> + <span class="number">3</span> + <span class="number">4</span>); 	<span class="comment">//输出：Hello34</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello!&quot;</span> + (<span class="number">3</span> + <span class="number">4</span>));     <span class="comment">//输出：Hello7</span></span><br><span class="line">        System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> + <span class="string">&quot;Hello!&quot;</span>);    	<span class="comment">// 输出：98Hello</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>+ <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);       <span class="comment">//输出：Helloa1</span></span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-9-进制"><a href="#2-9-进制" class="headerlink" title="2.9 进制"></a>2.9 进制</h2><table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">二进制</th>
<th align="center">十六进制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">0</td>
<td align="center">0</td>
<td align="center">0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">0001</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">0010</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">0011</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">0100</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">0101</td>
<td align="center">5</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">0110</td>
<td align="center">6</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">0111</td>
<td align="center">7</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">1000</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">1001</td>
<td align="center">9</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">1010</td>
<td align="center">A</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">1011</td>
<td align="center">B</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">1100</td>
<td align="center">C</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">1101</td>
<td align="center">D</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">1110</td>
<td align="center">E</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">1111</td>
<td align="center">F</td>
</tr>
</tbody></table>
<p><strong>一个16进制数正好可以映射为4个bit的2进制数，所以2个16进制对应8个bit，正好1个字节</strong></p>
<blockquote>
<p>正数和负数如何表示</p>
</blockquote>
<p>用最高位表示符号（最左边）；</p>
<p>​        如果符号位为0，说明这个数就是正数；</p>
<p>​        如果符号位为1，说明这个数就是负数</p>
<blockquote>
<p>计算机中所有的数据都是以二进制的补码形式保存和处理的</p>
</blockquote>
<p>​        正数的补码就是它自己</p>
<p>​        eg:<br>​        0011 1011 =&gt; 0x3B =&gt; 16*3 + 16 =&gt; 59</p>
<p>​        0011 1011 是 + 59 在计算机中的真实存储</p>
<p>​        负数的补码：由它的相反数全部取反再加1得到</p>
<p>​        1101 0011 =&gt; 这是负数的补码</p>
<p>​        -1 =&gt; 1101 0010</p>
<p>​        取反 =&gt; 0010 1101 =&gt; 0x2D =&gt; 16*2 + 15 =&gt; 45</p>
<p>​        1101 0011 是-45在计算机中的真实存储</p>
<p>​        <strong>byte型最小值</strong></p>
<p>​        1000 0000 =&gt;</p>
<p>​        -1 =&gt; 0111 1111 </p>
<p>​        取反 =&gt; 1000 0000 =&gt; 0x80 =&gt; 16*8 =&gt; 128</p>
<p>​        所以 1000 0000 是 -128</p>
<p>​        <strong>short型的最大值</strong></p>
<p>​        0111 1111 1111 1111 =&gt; 0x7FFF</p>
<p>​        <strong>short 型的最小值</strong></p>
<p>​        1000 0000 0000 0000 =&gt; 0x8000</p>
<p>​        int<strong>型最大值</strong></p>
<p>​       0111 1111 1111 1111 1111 1111 1111 1111 =&gt; 0x7FFFFFFF</p>
<p>​        <strong>int型最小值</strong></p>
<p>​        1000 0000 0000 0000 0000 0000 0000 0000 =&gt; 0x8000_0000</p>
<p>​        <strong>long型最大值</strong></p>
<p>​        0x7FFFFFFF_FFFFFFFF</p>
<p>​        <strong>long型最小值</strong></p>
<p>​        0x80000000_00000000</p>
<p>​        <strong>char型最大值</strong></p>
<p>​        1111 1111 1111 1111 =&gt; 0xFFFF</p>
<p>​        <strong>char型最小值</strong></p>
<p>​        0000 0000 0000 0000 =&gt; 0x0000</p>
<h2 id="2-10-运算符和标点符号"><a href="#2-10-运算符和标点符号" class="headerlink" title="2.10 运算符和标点符号"></a>2.10 运算符和标点符号</h2><h3 id="2-10-1-位运算符"><a href="#2-10-1-位运算符" class="headerlink" title="2.10.1 位运算符"></a>2.10.1 位运算符</h3><table>
<thead>
<tr>
<th align="center">符号类型</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&lt;&lt;</td>
<td align="center">左移，右面补0</td>
</tr>
<tr>
<td align="center">&gt;&gt;</td>
<td align="center">有符号右移，左面补符号位</td>
</tr>
<tr>
<td align="center">&gt;&gt;&gt;</td>
<td align="center">无符号右移，左面补0</td>
</tr>
<tr>
<td align="center">&amp;</td>
<td align="center">按位与，只要有0就是0，除非全是1，让数变小</td>
</tr>
<tr>
<td align="center">|</td>
<td align="center">按位或，只要有1就是1，除非全是0，让数变大</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">按位异或，只要不一样就是1，否则是0，用于加密</td>
</tr>
<tr>
<td align="center">~</td>
<td align="center">按位取反，全部反，正数变负数，负数变正数</td>
</tr>
</tbody></table>
<h3 id="2-10-2-算术运算符"><a href="#2-10-2-算术运算符" class="headerlink" title="2.10.2 算术运算符"></a>2.10.2 算术运算符</h3><table>
<thead>
<tr>
<th align="center">符号类型</th>
<th align="center">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">+</td>
<td align="center">取自身的一个数</td>
</tr>
<tr>
<td align="center">-</td>
<td align="center">取一个自身的相反数</td>
</tr>
<tr>
<td align="center">/</td>
<td align="center">整数相除，会导致数据的精度的丢失</td>
</tr>
<tr>
<td align="center">%</td>
<td align="center">取2个数相除后的余数</td>
</tr>
</tbody></table>
<p><strong>% 的应用</strong></p>
<ul>
<li><p>M%N结果总是小于Nd的值，可以让一个未知数落入一个确定的N的范围内</p>
</li>
<li><p>M%N结果如果为0，说明M可以被N整除</p>
<ul>
<li>M%2，如果结果为0，说明M是个整数；如果结果不为0，说明M是个奇数。</li>
</ul>
</li>
<li><p>5%-2 ,右面的负号忽略 =&gt; 1</p>
</li>
<li><p>-5 % 2,左面的负号要保留 =&gt; -1</p>
<p><strong>注意</strong> ： 虽然浮点数也支持%，但是从来不用</p>
</li>
</ul>
<p><strong>++ 和 – 的说明</strong></p>
<p>int a  = 10;</p>
<p>a++; // 后加加   a:11</p>
<p>int b = 20;</p>
<p>++b; // 前加加 b : 21</p>
<p>++a // 前加加, 先加后用,  先把a中的值加上1以后, 再用加过后的值作为表达式的值</p>
<p>a++ // 后加加, 先用后加. </p>
<p>赋值符号的优先级最低的, 右面的处理没有完成,绝不能赋值, 必须要把右面的所有事情都办妥了, 再把值赋值到左面.</p>
<p>a = a++;</p>
<p>用的是临时空间的10</p>
<p><img src="https://techyang-blog-pic.oss-cn-beijing.aliyuncs.com/img/image-20230424122432731.png" alt="image-20230424122432731"></p>
<p><strong>练习</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">a = b++;    <span class="comment">// a=10  ,b=11  ,c=10</span></span><br><span class="line">c = --a;    <span class="comment">// a=9  ,b=11  ,c=9</span></span><br><span class="line">b = ++a;    <span class="comment">// a=10  ,b=10  ,c=9</span></span><br><span class="line">a = c--;    <span class="comment">// a=9  ,b=10  ,c=8</span></span><br><span class="line"></span><br><span class="line">System.out.println(a); <span class="comment">// 9</span></span><br><span class="line">System.out.println(b); <span class="comment">// 10</span></span><br><span class="line">System.out.println(c); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = (a++)+(++a)+(a*<span class="number">10</span>);</span><br><span class="line"><span class="comment">//        4     6      60</span></span><br><span class="line"><span class="comment">//       a=5   a=6    a=6</span></span><br><span class="line"></span><br><span class="line">System.out.println(a);<span class="comment">//6</span></span><br><span class="line">System.out.println(b);<span class="comment">//70</span></span><br></pre></td></tr></table></figure>

<h3 id="2-10-3-比较运算符"><a href="#2-10-3-比较运算符" class="headerlink" title="2.10.3 比较运算符"></a>2.10.3 比较运算符</h3><p>结果总是会产生一个boolean值, 要么true, 要么false.</p>
<ol>
<li><p>比较大小 :  &gt;, &lt;, &gt;=, &lt;=</p>
<p>以上的比较只能适用于基本数据类型中的数值型之间. </p>
<p>eg:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a  =<span class="number">5</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="number">3.2</span>;</span><br><span class="line">a &lt; b;<span class="comment">// false</span></span><br><span class="line"><span class="comment">// *****************</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 5 &lt;= n &lt; 20 ======&gt; 错误, 左面会产生一个boolean, 不能和右面的20比较!!!!</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> &lt;= n == <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>比较是否相等 : ==,  != </p>
<p>适用于任意数据类型之间.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s1;</span><br><span class="line">Dog d1;</span><br><span class="line">s1 == d1; <span class="comment">// 编译出错.</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-10-4-逻辑运算符"><a href="#2-10-4-逻辑运算符" class="headerlink" title="2.10.4 逻辑运算符"></a>2.10.4 逻辑运算符</h3><p>可以产生Boolean；适用于2个boolean之间</p>
<ol>
<li><p>&amp;, &amp;&amp; 逻辑与, 就是并且的意思, 左面的boolean是true再并且右面的boolean也是true, 结果才是true</p>
<p>只要有false, 结果一定是false. 除非2个全是true结果才是true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1 = <span class="keyword">true</span>;</span><br><span class="line">b2 = <span class="keyword">false</span>;</span><br><span class="line">b1 &amp;&amp; b2;<span class="comment">// ==&gt; false</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>短路与 : </p>
<p>a &amp;&amp; b =&gt; 如果a是true, 需要继续判断b, 如果b是true, 结果就是true, 如果b是false结果就是false</p>
<p>a &amp;&amp; b =&gt; 如果a是false. 结果肯定是false, 右面的b的判断和操作就省略了….</p>
<ol start="2">
<li><p>|, || 逻辑或, 就是或者的意思. 左面是false, 右面是true, 结果是true, 左面是false, 右面也是false 结果才是false.</p>
<p>只是有true, 结果一定是true, 除非全是false才是false</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">b1 = <span class="keyword">true</span>;</span><br><span class="line">b2 = <span class="keyword">false</span>;</span><br><span class="line">b1 || b2;<span class="comment">// ==&gt; true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>短路或 : </p>
<p>a || b =&gt; 如果有a是false, 需要继续判断b, 如果b也是false, 结果就是false, 如果b是true, 结果就是true</p>
<p>a || b =&gt; 如果有a是true, 结果一定是true, 右面的b的判断的操作就省略了…</p>
<ol start="3">
<li><p>! 是单目运算, 一元运算, 针对一个boolean值, 取它的相反</p>
<p>!a.  如果a是true, 结果就是false</p>
<p>!a.  如果a是false, 结果就是true</p>
</li>
</ol>
<h3 id="2-10-5-赋值运算符"><a href="#2-10-5-赋值运算符" class="headerlink" title="2.10.5 赋值运算符"></a>2.10.5 赋值运算符</h3><p>最重要的运算符</p>
<p>左 = 右. </p>
<p>左面必须是变量.   把右面的确定的量值写入左面的变量映射的内存空间.</p>
<p>int a;</p>
<p>赋值表达式本身有值, 它的值就是最右值 …</p>
<p>System.out.println(a = 20); // 不会再从a中复制值.</p>
<p>java中支持连续赋值</p>
<p>int a, b, c, d;</p>
<p>a = b = c = d = 50;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+=  将左边变量的值和右边的常量值/变量值/表达式的值进行相加，最后将结果赋值给左边的变量 </span><br><span class="line"></span><br><span class="line">-=  将左边变量的值和右边的常量值/变量值/表达式的值进行相减，最后将结果赋值给左边的变量 </span><br><span class="line"></span><br><span class="line">*=  将左边变量的值和右边的常量值/变量值/表达式的值进行相乘，最后将结果赋值给左边的变量  </span><br><span class="line"></span><br><span class="line">/=  将左边变量的值和右边的常量值/变量值/表达式的值进行相除，最后将结果赋值给左边的变量</span><br></pre></td></tr></table></figure>



<p>int a = 20;</p>
<p>a += 30;  // a = a + 30 =&gt; a : 50</p>
<p><strong>累加, 不会有任何数据类型的变化的波动.</strong></p>
<p>a += 5.8;  //a = a + 5.8. =&gt; 55</p>
<p><strong>累操作的最大特点就是不用再考虑类型的变化.</strong></p>
<p>byte b = 127;</p>
<p>b += 5; // b = b + 5;</p>
<h1 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3. 流程控制语句"></a>3. 流程控制语句</h1><h2 id="3-1-分支语句"><a href="#3-1-分支语句" class="headerlink" title="3.1 分支语句"></a>3.1 分支语句</h2><h3 id="3-1-1-三目运算符"><a href="#3-1-1-三目运算符" class="headerlink" title="3.1.1 三目运算符"></a>3.1.1 三目运算符</h3><p>变量 = 布尔表达式 ? 表达式1 : 表达式2;</p>
<p>double a = (20 &lt; 4) ? 10 : 30.0; </p>
<h3 id="3-1-2-流程控制之分支"><a href="#3-1-2-流程控制之分支" class="headerlink" title="3.1.2 流程控制之分支"></a>3.1.2 流程控制之分支</h3><p>根据条件, 有选择性地执行某段代码</p>
<p><strong>if…else…</strong></p>
<ol>
<li><p>非分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">	语句块; <span class="comment">// 如果布尔表达式为true时执行. </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>二分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">	语句块<span class="number">1</span>;  <span class="comment">// 布尔表达式为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	语句块<span class="number">2</span>;  <span class="comment">// 布尔表达式为false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>语句块之间的关系是互斥和对立.</strong></p>
</li>
<li><p>多分支</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">	语句块<span class="number">1</span>; <span class="comment">// 布尔表达式1为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">	语句块<span class="number">2</span>; <span class="comment">// 布尔表达式1为false, 并且布尔表达式2为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>) &#123;</span><br><span class="line">	语句块<span class="number">3</span>; <span class="comment">// 布尔表达式1为false, 并且布尔表达式2为false, 并且布尔表达式3为true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">4</span> ) &#123;</span><br><span class="line">	语句块<span class="number">4</span>; <span class="comment">// 布尔表达式1为false, 并且布尔表达式2为false, 并且布尔表达式3为false, 并且布尔表达式4为true</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>switch case</strong></p>
<p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (变量名) &#123;</span><br><span class="line">  <span class="keyword">case</span> : 常量<span class="number">1</span></span><br><span class="line">    执行语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> : 常量<span class="number">2</span></span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> : 常量<span class="number">3</span></span><br><span class="line">    执行语句<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">  <span class="keyword">default</span> : </span><br><span class="line">    执行语句n;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>break不是必须要写的，如果不写break会发生穿透，case后边的都会执行，直到遇到break或者执行到switch代码块结束</li>
</ul>
<h2 id="3-2-循环语句"><a href="#3-2-循环语句" class="headerlink" title="3.2 循环语句"></a>3.2 循环语句</h2><p>在某种条件的满足下，反复执行特定的代码功能。</p>
<p>循环语句组成部分:</p>
<ol>
<li>初始化语句</li>
<li>循环条件语句</li>
<li>循环体</li>
<li>迭代语句</li>
</ol>
<h3 id="3-2-1-while-循环"><a href="#3-2-1-while-循环" class="headerlink" title="3.2.1 while 循环"></a>3.2.1 while 循环</h3><p>while循环语句的基本格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[初始化语句]</span><br><span class="line">while(循环条件语句)&#123;</span><br><span class="line">	循环体语句；</span><br><span class="line">	[迭代语句]；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong>while (循环条件)中循环条件必须是Boolean类型</p>
<p><strong>执行流程：</strong></p>
<ul>
<li>第一步：执行初始化语句</li>
<li>第二步： 执行循环条件语句，看循环条件语句的值是true还是false；<ul>
<li>如果是true,执行第二步</li>
<li>如果是false,循环语句结束，循环不再执行</li>
</ul>
</li>
<li>第三步：执行循环体语句；</li>
<li>第四步：执行迭代语句</li>
</ul>
<p>循环条件成立就执行循环体语句。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05While</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">            result += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;result：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-2-do…-while-循环"><a href="#3-2-2-do…-while-循环" class="headerlink" title="3.2.2 do…. while 循环"></a>3.2.2 do…. while 循环</h3><p>do…while循环语句格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[初始化语句；]</span><br><span class="line">do&#123;</span><br><span class="line">	循环体语句；</span><br><span class="line">    [迭代语句;]</span><br><span class="line">&#125;while (循环条件语句)；</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>while(循环条件)中循环条件必须是boolean类型</li>
<li>do{}while();最后有一个分号</li>
<li>do…while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li>
</ul>
<p><strong>执行流程：</strong></p>
<ul>
<li>第一步：初始化语句；</li>
<li>第二步 : 执行循环体语句</li>
<li>第三步 : 执行迭代语句</li>
<li>第四步：执行循环条件语句，看循环条件语句的值是true，还是false；<ul>
<li>如果是true，执行第二步；</li>
<li>如果是false，循环语句终止，循环不再执行。</li>
</ul>
</li>
</ul>
<p>do…while循环至少执行一次循环体。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05doWhile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            result += i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (i &lt;= <span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result：&quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-3-for-循环"><a href="#3-2-3-for-循环" class="headerlink" title="3.2.3 for 循环"></a>3.2.3 for 循环</h3><p>for循环语句格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for(初始化语句A; 循环条件语句B; 迭代语句C) &#123;</span><br><span class="line">	循环体语句D; </span><br><span class="line">&#125;</span><br><span class="line">A B D C B D C B D ....... C B D ..... B</span><br><span class="line">迭代语句C是每次循环的开始!!!!</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：</p>
<ul>
<li>for(;;)中的两个；是不能多也不能少</li>
<li>循环条件必须是boolean类型</li>
</ul>
<p><strong>执行流程：</strong></p>
<ul>
<li><p>第一步：执行初始化语句A</p>
</li>
<li><p>第二步：执行循环条件语句B，看循环条件语句的值是true，还是false；</p>
<ul>
<li>如果是true，执行第三步；</li>
<li>如果是false，循环语句中止，循环不再执行。</li>
</ul>
</li>
<li><p>第三步：执行循环体语句D</p>
</li>
<li><p>第四步：执行迭代语句C</p>
</li>
<li><p>第五步：执行循环条件，重新从第二步开始再执行一遍</p>
</li>
</ul>
<p>使用for循环重复执行某些语句。</p>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01For</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            result += i;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;result : &quot;</span> + result);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-4-死循环"><a href="#3-2-4-死循环" class="headerlink" title="3.2.4 死循环"></a>3.2.4 死循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    循环体语句块；<span class="comment">//如果循环体中没有跳出循环体的语句，那么就是死循环</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-5-无限循环"><a href="#3-2-5-无限循环" class="headerlink" title="3.2.5 无限循环"></a>3.2.5 无限循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    语句块;</span><br><span class="line">&#125; <span class="keyword">while</span> (flag);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;flag;)&#123;</span><br><span class="line">    循环体语句块；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-6-循环语句的区别"><a href="#3-2-6-循环语句的区别" class="headerlink" title="3.2.6 循环语句的区别"></a>3.2.6 循环语句的区别</h3><ul>
<li><p>从循环次数角度分析</p>
<ul>
<li>do…while循环至少执行一次循环体语句</li>
<li>for和while循环先循环条件语句是否成立，然后决定是否执行循环体，至少执行零次循环体语句</li>
</ul>
</li>
<li><p>如何选择</p>
<ul>
<li>遍历有明显的循环次数（范围）的需求，选择for循环</li>
<li>遍历没有明显的循环次数（范围）的需求，循环while循环</li>
<li>如果循环体语句块至少执行一次，可以考虑使用do…while循环</li>
<li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li>
</ul>
</li>
<li><p>三种循环结构都具有四要素：</p>
<ul>
<li>循环变量的初始化表达式</li>
<li>循环条件</li>
<li>循环变量的修改的迭代表达式</li>
<li>循环体语句块</li>
</ul>
</li>
</ul>
<h3 id="3-2-7-循环嵌套"><a href="#3-2-7-循环嵌套" class="headerlink" title="3.2.7 循环嵌套"></a>3.2.7 循环嵌套</h3><p><strong>所谓嵌套循环</strong>，是指一个循环的循环体是另一个循环。比如for循环里面还有一个for循环，就是嵌套循环。当然可以是三种循环任意互相嵌套。</p>
<p>例如：两个for嵌套循环格式    </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句A; 循环条件语句B; 迭代语句C) &#123;</span><br><span class="line">    <span class="keyword">for</span>(初始化语句D; 循环条件语句E; 迭代语句F) &#123;</span><br><span class="line">      	循环体语句G;</span><br><span class="line">    &#125;</span><br><span class="line">    循环体语句H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">A <span class="title">B</span> <span class="params">(D E G F E G .... F E G... E)</span> H C <span class="title">B</span> <span class="params">(D E G F E G .... F E G... E)</span> ... B</span></span><br></pre></td></tr></table></figure>

<p><strong>执行特点：</strong>外循环执行一次，内循环执行一轮。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>javaSE</tag>
      </tags>
  </entry>
</search>
